<!doctype html>
<html 
    lang="en" 
    data-show-errors
    data-i18n-default="en"
    data-i18n-locales="en,ja,es,pt-BR,ar,fr,zh-CN"
    data-i18n-file="countries">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
        <title data-i18n="Countries Demo | Vue"></title>
        <link rel="stylesheet" href="css/countries.css">
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/semantic-ui-flag@2.4.0/flag.min.css">
        <link rel="canonical" href="https://www.dataformsjs.com/examples/places-demo-hbs.htm">
    </head>
    <body>
        <div id="view" dir="auto"></div>

        <!--
            For Vue including the attributes such as [data-countries] and [data-regions]
            are defined in the template so that Vue creates Watchers for them.

            For this page these properties are typically defined dynamically for the 
            model after the JSON service downloads the data. In some pages defining dynamic
            properties may not be needed however it is recommended when using Vue to
            avoid unexpected rendering issues.
        -->
        
        <script
            type="text/x-template"
            data-engine="vue"
            data-default-route
            data-route="/:lang/"
            data-page="jsonData"
            data-url="https://www.dataformsjs.com/data/geonames/countries"
            data-load-only-once="true"
            data-countries>

            <h3 v-if="isLoading" v-i18n="'Loading...'"></h3>
            <p v-if="hasError"><span v-i18n="'Error'"></span> - {{ errorMessage }}</p>
            <div v-if="isLoaded" class="flex-col">
                <h1 v-i18n="'Countries'"></h1>

                <nav>
                    <a v-bind:href="'#/' + i18n_Locale + '/search'" v-i18n="'Search'"></a>
                    <a v-bind:href="'#/' + i18n_Locale + '/info'" v-i18n="'Info'"></a>
                </nav>
                
                <input 
                    data-filter-selector="table"
                    data-filter-results-text-selector="h1"
                    data-filter-results-text-all="{totalCount} Countries" 
                    data-filter-results-text-filtered="Showing {displayCount} of {totalCount} Countries"
                    placeholder="Enter filter, example 'North America'"
                    v-i18n-attr="'data-filter-results-text-all, data-filter-results-text-filtered, placeholder'">

                <table data-sort data-sort-class-odd="row-odd" data-sort-class-even="row-even">
                    <thead>
                        <tr>
                            <th v-i18n="'Code'"></th>
                            <th v-i18n="'Name'"></th>
                            <th v-i18n="'Size (KM)'"></th>
                            <th v-i18n="'Population'"></th>
                            <th v-i18n="'Continent'"></th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr v-for="country in countries">
                            <td><a v-bind:href="'#/' + i18n_Locale + '/regions/' + country.iso">{{ country.iso }}</a></td>
                            <td>
                                <i v-bind:class="country.iso.toLowerCase() + ' flag'"></i>
                                <span>{{ country.country }}<span>
                            </td>
                            <td class="align-right" v-bind:data-value="country.area_km" v-format-number="country.area_km"></td>
                            <td class="align-right" v-bind:data-value="country.population" v-format-number="country.population"></td>
                            <td>{{ country.continent }}</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </script>

        <script
            type="text/x-template"
            data-engine="vue"
            data-route="/:lang/regions/:country"
            data-page="jsonData"
            data-url="https://www.dataformsjs.com/data/geonames/regions/:country"
            data-load-only-once="true"
            data-regions
            src="html/regions-vue.htm">
        </script>

        <script
            type="text/x-template"
            data-engine="vue"
            data-route="/:lang/cities/:country/:region"
            data-page="jsonData"
            data-url="https://www.dataformsjs.com/data/geonames/cities/:country/:region"
            data-load-only-once="true"
            data-cities
            src="html/cities-vue.htm">
        </script>     
        
        <script
            type="text/x-template"
            data-engine="vue"
            data-route="/:lang/city/:id"
            data-page="jsonData"
            data-url="https://www.dataformsjs.com/data/geonames/place/:id"
            data-load-only-once="true"
            data-lazy-load="leafletCss, leafletJs, leafletPlugin"
            data-place
            data-fields            
            src="html/place-vue.htm">
        </script>

        <script
            type="text/x-template"
            data-engine="vue"
            data-route="/:lang/search"
            data-page="jsonData"
            data-url="https://www.dataformsjs.com/data/geonames/countries?order_by=country"
            data-load-only-once="true"
            data-lazy-load="json_data, keydownAction, chosen, chosenPlugin"
            data-countries
            data-cities
            src="html/search-places-vue.htm">
        </script>

        <script
            type="text/x-template"
            data-engine="vue"
            data-route="/:lang/info"
            data-src="html/places-info-vue.htm">
        </script>

        <template id="loading-spinner-screen">
            <div class="loading">
                <div class="lds-roller"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>
            </div>
        </template>

        <!-- Vue
		Dev Latest:
			<script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
		Specific Dev Version:
			<script src="https://cdn.jsdelivr.net/npm/vue@2.5.17/dist/vue.js"></script>
        Prod Version 2:
            <script src="https://cdn.jsdelivr.net/npm/vue"></script>
        Vue 3 Beta Version
            <script src="https://unpkg.com/vue@next"></script>
        Local:
            <script src="../vendor/vue.js"></script>
        -->
        <!--
            <script src="https://unpkg.com/vue@next"></script>
         -->
        <script src="../vendor/vue@3.0.0-beta.15.global.js"></script>
        <!-- <script src="https://cdn.jsdelivr.net/npm/vue"></script> -->

        <!-- DataFormsJS -->
        <script src="../js/DataFormsJS.js"></script>
        <script src="../js/extensions/vue-directives.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/dataformsjs@4.1.0/js/pages/jsonData.min.js"></script>
        <script src="../js/plugins/filter.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/dataformsjs@4.1.0/js/plugins/sort.min.js"></script>
        <script src="../js/plugins/i18n.js"></script>
        <script>
            // Lazy Load the following scripts only if needed based on attribute [data-lazy-load].
            // When scripts need to be downloaded in a specific order then use an array otherwise
            // one script per key is recommended. When a controller uses multiple lazy load items
            // they are downloaded asynchronous however items in the array are download only after
            // the previous item is loaded.
            app.lazyLoad = {
                chosen: [
                    // [jquery] must be included before [chosen] and [countries-chosen.css]
                    // must be loaded after [chosen.css].
                    'https://code.jquery.com/jquery-3.4.1.min.js',
                    'https://cdn.jsdelivr.net/npm/chosen-js@1.8.7/chosen.css',
                    'https://cdn.jsdelivr.net/npm/chosen-js@1.8.7/chosen.jquery.min.js',
                    'css/countries-chosen.css',
                ],
                chosenPlugin: [
                    // For this demo the [dataBind] plugin is loaded before [chosen]
                    // to make sure that the <select> value will be set before the chose
                    // control is created. Otherwise the following jQuery code would have
                    // to be called to trigger the update.
                    //     $('.chosen-select').trigger('chosen:updated');
                    'https://cdn.jsdelivr.net/npm/dataformsjs@4.1.0/js/plugins/dataBind.min.js',
                    'https://cdn.jsdelivr.net/npm/dataformsjs@4.1.0/js/plugins/chosen.min.js',
                ],
                keydownAction: 'https://cdn.jsdelivr.net/npm/dataformsjs@4.1.0/js/plugins/keydownAction.min.js',
                json_data: '../js/controls/json-data.js',
                leafletCss: 'https://unpkg.com/leaflet@1.5.1/dist/leaflet.css',
                leafletJs: 'https://unpkg.com/leaflet@1.5.1/dist/leaflet.js',
                leafletPlugin: 'https://cdn.jsdelivr.net/npm/dataformsjs@4.1.0/js/plugins/leaflet.min.js',
            };
            app.settings.lazyTemplateSelector = '#loading-spinner-screen';
        </script>
    </body>
</html>