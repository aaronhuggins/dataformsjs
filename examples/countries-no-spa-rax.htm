<!doctype html>
<!--
    NOTE - This demo is smilar to the [countries-no-spa-preact.htm] demo but only partially works.

    It appears to not work due to a bug with Rax because the same code is working with React and Preact.
    Either that or there is an API difference not handled on this page.

    The loading screen flashes and there are no compile errors but data does not show once it is downloaded.
-->
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>Countries Demo | No SPA | Rax</title>
    <link rel="stylesheet" href="css/countries.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/semantic-ui-flag@2.4.0/flag.min.css">
    <link rel="canonical" href="https://www.dataformsjs.com/examples/countries-no-spa-hbs.htm">
    <style>
        ul {
            text-align: left;
            margin: 0 auto;
            max-width: 650px;
            line-height: 1.5em;
        }
    </style>
</head>
<body>
    <div id="view">
        <h1>Countries</h1>

        <div id="root"></div>
    </div>

    <!--
        Rax
        https://rax.js.org/
        https://github.com/alibaba/rax
        https://libraries.io/github/alibaba/rax
    -->
    <script src="https://unpkg.com/rax@1.1.1/dist/rax.js"></script>
    <script src="https://unpkg.com/driver-dom@2.0.6/dist/driver-dom.js"></script>

    <!-- DataFormsJS React Components -->
    <!-- <script type="text/babel" src="https://cdn.jsdelivr.net/npm/dataformsjs@4.5.5/js/react/es6/ErrorBoundary.js"></script>
    <script type="text/babel" src="https://cdn.jsdelivr.net/npm/dataformsjs@4.5.5/js/react/es6/JsonData.js"></script>
    <script type="text/babel" src="https://cdn.jsdelivr.net/npm/dataformsjs@4.5.5/js/react/es6/InputFilter.js"></script>
    <script type="text/babel" src="https://cdn.jsdelivr.net/npm/dataformsjs@4.5.5/js/react/es6/SortableTable.js"></script>
    <script type="text/babel" src="https://cdn.jsdelivr.net/npm/dataformsjs@4.5.5/js/react/es6/Format.js"></script> -->

    <script>
        // The build file [DataFormsJS.min.js] needs a reference to either `React` or `Preact`.
        // If Rax is found to work in the future then the DataFormsJS build process can be updated to support it.
        window.React = window.Rax;
    </script>
    <script src="https://cdn.jsdelivr.net/npm/dataformsjs@4.5.5/js/react/es5/DataFormsJS.min.js"></script>

    <!-- DataFormsJS JSX Loader -->
    <script src="https://cdn.jsdelivr.net/npm/dataformsjs@4.5.5/js/react/jsxLoader.min.js"></script>
    <script>
        // Set to `true` to view compiler details
        jsxLoader.logCompileTime = true;
        jsxLoader.logCompileDetails = true;

        // Replace React API's used in this demo with Rax once code is compiled
        //
        // Also instead of `ReactDOM.render` the code `Rax.render` is used
        // a third paratemer that is specific to Rax: { driver: DriverDOM }
        //
        jsxLoader.jsUpdates.push({ find: /React\.Component/g, replace: 'Rax.Component' });
        jsxLoader.jsUpdates.push({ find: /React\.Fragment/g, replace: 'Rax.Fragment' });
        jsxLoader.jsUpdates.push({ find: /React\.createElement/g, replace: 'Rax.createElement' });
        jsxLoader.jsUpdates.push({ find: /React\.cloneElement/g, replace: 'Rax.cloneElement' });
        jsxLoader.jsUpdates.push({ find: /React\.createRef/g, replace: 'Rax.createRef' });

        // Overwrite the standard pollyfill function for React when Babel is used (IE 11, old iOS/Safari, etc)
        jsxLoader.addBabelPolyfills = function() {
            window.exports = window;
            window.require = function(module) {
                switch (module) {
                    case 'react':
                    case 'react-dom':
                        return window.Rax;
                    default:
                        return window[module];
                }
            };
        };
    </script>

    <script type="text/babel">
        const format = new Format();

        function ShowLoading() {
            return <h3 className="loading">Loading...</h3>;
        }

        function ShowError(props) {
            return <p className="error">{props.error}</p>;
        }

        function ShowCountries(props) {
            return (
                <React.Fragment>
                    <InputFilter
                        filter-selector="table"
                        filter-results-selector="h1"
                        filter-results-text-all="{totalCount} Countries"
                        filter-results-text-filtered="Showing {displayCount} of {totalCount} Countries"
                        placeholder="Enter filter, example 'North America'" />

                    <p>
                        <ul>
                            <li>This demo uses <a href="https://rax.js.org/" target="_blank">Rax</a> instead of React and is copied from the React Demo.</li>
                            <li>Most of the code is the same as the React version except that [jsxLoader.jsUpdates] and [jsxLoader.addBabelPolyfills] include custom options defined on the page to support Rax.</li>
                            <li>Use a diff viewer with the React version to see all differences.</li>
                        </ul>
                    </p>

                    <SortableTable
                        data-sort-class-odd="row-odd"
                        data-sort-class-even="row-even">
                        <thead>
                            <tr>
                                <th>Code</th>
                                <th>Name</th>
                                <th>Size (KM)</th>
                                <th>Population</th>
                                <th>Continent</th>
                            </tr>
                        </thead>
                        <tbody>
                            {props.data && props.data.countries && props.data.countries.map(country => {
                                return (
                                    <tr key={country.iso}>
                                        <td>{country.iso}</td>
                                        <td>
                                            <i className={country.iso.toLowerCase() + ' flag'}></i>
                                            <span>{country.country}</span>
                                        </td>
                                        <td className="align-right" data-value={country.area_km}>{format.number(country.area_km)}</td>
                                        <td className="align-right" data-value={country.population}>{format.number(country.population)}</td>
                                        <td>{country.continent}</td>
                                    </tr>
                                )
                            })}
                        </tbody>
                    </SortableTable>
                </React.Fragment>
            )
        }

        class App extends React.Component {
            render() {
                return (
                    <ErrorBoundary>
                        <JsonData
                            url="https://www.dataformsjs.com/data/geonames/countries"
                            isLoading={<ShowLoading />}
                            hasError={<ShowError />}
                            isLoaded={<ShowCountries />} />
                    </ErrorBoundary>
                )
            }
        }

        Rax.render(
            <App />,
            document.getElementById('root'),
            { driver: DriverDOM }
        );
    </script>
</body>
</html>