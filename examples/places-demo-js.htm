<!doctype html>
<html
    lang="en"
    data-show-errors
    data-i18n-default="en"
    data-i18n-locales="en,ja,es,pt-BR,ar,fr,zh-CN"
    data-i18n-file="countries">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
        <title data-i18n="Countries Demo | JavaScript"></title>
        <link rel="stylesheet" href="css/countries.css">
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/semantic-ui-flag@2.4.0/flag.min.css">
        <link rel="canonical" href="https://www.dataformsjs.com/examples/places-demo-hbs.htm">
    </head>
    <body>
        <div id="view" dir="auto"></div>

        <template id="loading-screen">
            <h3 data-i18n="Loading..."></h3>
        </template>

        <template id="error-screen">
            <div><span data-i18n="Error"></span> - <span data-bind="errorMessage"></span></div>
        </template>

        <template id="loading-spinner-screen">
            <div class="loading">
                <div class="lds-roller"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>
            </div>
        </template>

        <template
            data-default-route
            data-route="/:lang/"
            data-page="jsonData"
            data-url="https://www.dataformsjs.com/data/geonames/countries"
            data-load-only-once="true">

            <div class="is-loading" data-template-id="loading-screen"></div>
            <div class="has-error" data-template-id="error-screen"></div>
            <div class="is-loaded flex-col">
                <h1 data-i18n="Countries"></h1>

                <nav>
                    <a href="#/en/info" data-i18n="Info" data-i18n-href></a>
                </nav>

                <input
                    data-filter-selector="table"
                    data-filter-results-text-selector="h1"
                    data-filter-results-text-all="{totalCount} Countries"
                    data-filter-results-text-filtered="Showing {displayCount} of {totalCount} Countries"
                    placeholder="Enter filter, example 'North America'"
                    data-i18n-attr="data-filter-results-text-all, data-filter-results-text-filtered, placeholder">

                <div class="responsive-table">
                    <data-table
                        class="countries"
                        data-source="countries"
                        data-labels="Code, Name, Size (KM), Population, Continent"
                        data-i18n-attr="data-labels"
                        data-sort
                        data-sort-class-odd="row-odd"
                        data-sort-class-even="row-even">
                    </data-table>
                </div>
            </div>
        </template>

        <template
            type="text/x-template"
            data-engine="handlebars"
            data-route="/:lang/regions/:country"
            data-page="jsonData"
            data-url="https://www.dataformsjs.com/data/geonames/regions/:country"
            data-load-only-once="true"
            data-src="html/regions-js.htm">
        </template>

        <template
            data-route="/:lang/cities/:country/:region"
            data-page="jsonData"
            data-url="https://www.dataformsjs.com/data/geonames/cities/:country/:region"
            data-load-only-once="true"
            data-src="html/cities-js.htm">
        </template>

        <template
            data-route="/:lang/city/:id"
            data-page="jsonData"
            data-url="https://www.dataformsjs.com/data/geonames/place/:id"
            data-load-only-once="true"
            data-lazy-load="leafletCss, leafletJs, leafletPlugin, data_list"
            data-src="html/place-js.htm">
        </template>

        <template
            data-route="/:lang/info"
            data-src="html/places-info-js.htm">
        </template>

        <script src="https://cdn.jsdelivr.net/npm/dataformsjs@4.5.5/js/DataFormsJS.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/dataformsjs@4.5.5/js/controls/data-table.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/dataformsjs@4.5.5/js/pages/jsonData.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/dataformsjs@4.5.5/js/plugins/i18n.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/dataformsjs@4.5.5/js/plugins/filter.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/dataformsjs@4.5.5/js/plugins/sort.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/dataformsjs@4.5.5/js/plugins/dataBind.min.js"></script>
        <script>
            // Lazy Load the following scripts only if needed based on attribute [data-lazy-load].
            // When scripts need to be downloaded in a specific order then use an array otherwise
            // one script per key is recommended. When a controller uses multiple lazy load items
            // they are downloaded asynchronous however items in the array are download only after
            // the previous item is loaded.
            app.lazyLoad = {
                leafletCss: 'https://unpkg.com/leaflet@1.5.1/dist/leaflet.css',
                leafletJs: 'https://unpkg.com/leaflet@1.5.1/dist/leaflet.js',
                leafletPlugin: 'https://cdn.jsdelivr.net/npm/dataformsjs@4.5.5/js/plugins/leaflet.min.js',
                data_list: 'https://cdn.jsdelivr.net/npm/dataformsjs@4.5.5/js/controls/data-list.min.js',
            };
            app.settings.lazyTemplateSelector = '#loading-spinner-screen';
        </script>

        <script>
            // When using a Template or View Engine links would be included
            // in the table however since only JavaScript is used a Custom Plugin
            // on this page sets up the links and Flag Images.
            app.addPlugin("pageLinksAndImages", function() {
                var table = document.querySelector("table"),
                    tableRows,
                    rowCount,
                    textContent,
                    x,
                    y,
                    tableType,
                    flag,
                    pageIso,
                    iso,
                    updateCols = [],
                    cells,
                    colCount,
                    dateCol = -1,
                    updateColLen,
                    value;

                if (table === null || table.tBodies === null || table.tBodies.length !== 1) {
                    return;
                }

                tableRows = table.tBodies[0].rows;
                rowCount = tableRows.length;

                // Check the first row and if it contains a link then
                // exit as this function as the plugin has already ran.
                textContent = tableRows[0].cells[0].innerHTML.trim();
                if (textContent.indexOf("<a") > -1) {
                    return;
                }

                // Which table to update?
                if (table.classList.contains("countries")) {
                    tableType = "countries";
                } else if (table.classList.contains("regions")) {
                    tableType = "regions";
                } else if (table.classList.contains("cities")) {
                    tableType = "cities";
                } else {
                    return;
                }

                // Country Code (iso) for the page
                pageIso = (app.activeParameterList.country ? app.activeParameterList.country.toLowerCase() : null);

                // Find Number and Date Columns so the data can be formatted
                cells = table.tHead.rows[0].cells;
                colCount = cells.length;
                for (x = 0; x < colCount; x++) {
                    switch (cells[x].textContent) {
                        case 'Size (KM)':
                        case 'Population':
                        case 'Elevation':
                            updateCols.push(x);
                            break;
                        case 'Date Last Modified':
                            dateCol = x;
                            break;
                    }
                }
                updateColLen = updateCols.length;

                // Replace the cell value with the same text an a link
                for (x = 0; x < rowCount; x++) {
                    row = tableRows[x];
                    textContent = row.cells[0].textContent.trim();
                    switch (tableType) {
                        case "countries":
                            link = '#/' + encodeURIComponent(app.activeModel.i18n_Locale) + '/regions/' + encodeURIComponent(textContent);
                            break;
                        case "regions":
                            link = '#/' + encodeURIComponent(app.activeModel.i18n_Locale) + '/cities/' + encodeURIComponent(app.activeModel.country) + '/' + encodeURIComponent(textContent);
                            break;
                        case "cities":
                            link = '#/' + encodeURIComponent(app.activeModel.i18n_Locale) + '/city/' + encodeURIComponent(textContent);
                            break;
                        default:
                            link = "#/";
                            break;
                    }
                    link = '<a href="' + link + '">' + app.escapeHtml(textContent) + '</a>';
                    row.cells[0].innerHTML = link;

                    // Add Image
                    iso = (pageIso ? pageIso : textContent.toLowerCase());
                    flag = document.createElement('i');
                    flag.className = iso + ' flag';
                    row.cells[1].insertAdjacentElement('afterbegin', flag);

                    // Format Numbers
                    for (y = 0; y < updateColLen; y++) {
                        value = row.cells[updateCols[y]].textContent;
                        row.cells[updateCols[y]].setAttribute('data-value', value); // Value for Sorting
                        row.cells[updateCols[y]].textContent = Number(value).toLocaleString(); // Value for Display
                    }

                    // Format Dates
                    if (dateCol !== -1) {
                        value = row.cells[dateCol].textContent;
                        row.cells[dateCol].setAttribute('data-value', value);
                        row.cells[dateCol].textContent = formatDate(value);
                    }
                }
            });

            // Date and Number formatting
            app.addPlugin('textFormatting', function() {
                var elements = document.querySelectorAll('.format-number');
                Array.prototype.forEach.call(elements, function(el) {
                    const value = el.textContent;
                    if (value && !isNaN(parseFloat(value))) {
                        el.setAttribute('data-value', value);
                        el.textContent = Number(value).toLocaleString();
                    }
                });
                elements = document.querySelectorAll('.format-date');
                Array.prototype.forEach.call(elements, function(el) {
                    const value = el.textContent;
                    if (value) {
                        el.setAttribute('data-value', value);
                        el.textContent = formatDate(value);
                    }
                });
            });

            // Simple date formatting to user's local format
            function formatDate(value) {
                let date;
                if (/^\d{4}-\d{2}-\d{2}$/.test(value)) {
                    const nums = value.split('-').map(function(n) { return parseInt(n, 10); });
                    date = new Date(nums[0], nums[1] - 1, nums[2]);
                } else {
                    date = new Date(value);
                }
                return new Intl.DateTimeFormat(navigator.language).format(date);
            }
        </script>
    </body>
</html>