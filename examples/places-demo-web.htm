<!doctype html>
<!--
    View this Demo Online at:
    https://www.dataformsjs.com/examples/places-demo-web.htm
-->
<html lang="en">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
        <title data-i18n="Countries Demo | Web Components"></title>
        <link rel="stylesheet" href="css/countries.css">
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/semantic-ui-flag@2.4.0/flag.min.css">
        <link rel="canonical" href="https://www.dataformsjs.com/examples/places-demo-hbs.htm">
        <style>
            /* Prevent custom web components from appearing during rendering include the following CSS */
            json-data:not(:defined),
            is-loading:not(:defined),
            has-error:not(:defined),
            is-loaded:not(:defined) { display:none; }
        </style>
    </head>
    <body>
        <div id="view" dir="auto"></div>

        <!--
            The <keydown-action-service> Web Component does not render content
            rather it provides a "service" for elements on the page that contain
            the attribute [data-enter-key-click-selector]. When using the polyfill
            the elements are handled by [js/plugins/keydownAction.js].
        -->
        <keydown-action-service></keydown-action-service>

        <!--
            Define SPA (Single Page App) Routes
        -->
        <url-router view-selector="#view" loading-template-selector="#loading-spinner-screen">
            <!--
                Routes can be embedded directly on the page as a <template> under <url-route>.
                [default-route] is optional and can be used if the default path is something other than "/".

                [onload] allows for custom JavaScript to be executed or functions
                to be called whenever the matching route is viewed.
            -->
            <url-route path="/"
                default-route
                onload="showMessage('Viewing Countries Page')">
                <template>
                    <h1>Countries</h1>

                    <nav>
                        <a href="#/search">Search</a>
                        <a href="#/info">Info</a>
                    </nav>

                    <json-data url="{rootApiUrl}/countries" load-only-once="true" onready="showMessage('Countries List is ready')">
                        <is-loading>
                            <span class="loading">Loading...</span>
                        </is-loading>
                        <has-error>
                            <span class="error" data-bind="errorMessage"></span>
                        </has-error>
                        <is-loaded class="flex-col">
                            <input
                                is="input-filter"
                                filter-selector="table"
                                filter-results-selector="h1"
                                filter-results-text-all="{totalCount} Countries"
                                filter-results-text-filtered="Showing {displayCount} of {totalCount} Countries"
                                placeholder="Enter filter, example 'North America'">

                            <div class="responsive-table">
                                <!--
                                    This version of the <data-table> uses a custom <template> to
                                    define how each table row item will be defined. This is used
                                    here to allow for display of the flag icon and number formatting.

                                    The template format is HTML using JavaScript template literals
                                    (template strings). All values in `${value}` are safely escaped for HTML.

                                    See another commented option for <data-table> below this version.

                                    Either <template> or <script type="text/x-template"> can be used.
                                        <template> will work with all modern browsers
                                        <script type="text/x-template"> is required if supporting IE with [polyfill.js]
                                -->
                                <data-table
                                    data-bind="countries"
                                    highlight-class="highlight"
                                    labels="Code, Name, Size (KM), Population, Continent"
                                    table-attr="is=sortable-table,
                                                data-sort-class-odd=row-odd,
                                                data-sort-class-even=row-even">
                                    <script type="text/x-template">
                                        <tr>
                                            <td><a href="#/regions/${iso}">${iso}</a></td>
                                            <td>
                                                <i class="${iso.toLowerCase()} flag"></i>
                                                ${country}
                                            </td>
                                            <td class="align-right" data-value="${area_km}">${format.number(area_km)}</td>
                                            <td class="align-right" data-value="${population}">${format.number(population)}</td>
                                            <td>${continent}</td>
                                        </tr>
                                    </script>
                                </data-table>

                                <!--
                                    For a basic table a <template> is not required. This version still
                                    contains links by using the [col-link-template] attribute however
                                    it will not show the flag icons or format numbers.
                                -->
                                <!--
                                <data-table
                                    data-bind="countries"
                                    highlight-class="highlight"
                                    col-link-template="#/regions/:iso"
                                    labels="Code, Name, Size (KM), Population, Continent"
                                    table-attr="is=sortable-table,
                                                data-sort-class-odd=row-odd,
                                                data-sort-class-even=row-even">
                                </data-table>
                                -->
                            </div>
                        </is-loaded>
                    </json-data>
                </template>
            </url-route>

            <!--
                The <template> source can also be downloaded dynamically when using [src].
                Routes with [lazy-load] will dynamically download needed scripts from
                `window.lazyLoad` near the bottom of this file only when first used.
            -->
            <url-route path="/regions/:country" src="html/regions-web.htm" onload="showMessage('Viewing Regions Page')"></url-route>
            <url-route path="/cities/:country/:region" src="html/cities-web.htm"></url-route>
            <url-route path="/city/:id" src="html/place-web.htm" lazy-load="leafletCss, leafletJs, leafletWeb, leafletPlugin, data_list"></url-route>
            <url-route path="/info" src="html/places-info-web.htm"></url-route>
            <url-route path="/search" src="html/search-places-web.htm" lazy-load="data_list, keydownAction"></url-route>
        </url-router>

        <template id="loading-spinner-screen">
            <div class="loading">
                <div class="lds-roller"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>
            </div>
        </template>

        <!-- DataFormsJS Web Components -->
        <script type="module" src="../js/web-components/url-router.js"></script>
        <script type="module" src="../js/web-components/json-data.js"></script>
        <script type="module" src="../js/web-components/data-table.js"></script>
        <script type="module" src="../js/web-components/input-filter.js"></script>
        <script type="module" src="../js/web-components/sortable-table.js"></script>
        <script nomodule src="../js/web-components/polyfill.js"></script>

        <!-- <script src="../js/web-components/polyfill.js"></script> -->

        <!--
            Many different HTML files use <json-data> with the same Root URL
            for JSON API Services. Rather than updating each file the global
            variable below is used to build the path for fetching data.
            Example:
                <json-data url="{rootApiUrl}/countries">

            Any variable name can be used as long as it is defined. This allows for
            rapid testing or changes to point to a different server when using <json-data>.
        -->
        <script>
            window.rootApiUrl = 'https://www.dataformsjs.com/data/geonames';
        </script>

        <script>
            /**
             * Display Elevation in both Meters and Feet
             *
             * This function ends up being used by <templates> under <data-table> elements
             * and also in [data-bind] elements using formatting: [data-format="formatElevation"].
             */
            function formatElevation(text) {
                var meters = parseInt(text, 10);
                if (!isNaN(meters)) {
                    var feet = parseInt(meters * 3.28084, 10)
                    return Number(meters).toLocaleString() + ' m / ' + Number(feet).toLocaleString() + "'";
                }
                return text;
            }
        </script>

        <script>
            // Lazy Load the following scripts only if needed based on attribute [lazy-load].
            // Scripts with `module` will only be loaded for modern browsers and scripts with
            // `nomodule` will only be loaded when using [polyfill.js]. All other scripts are
            // always loaded on first use.
            //
            // When scripts need to be downloaded in a specific order then use an array otherwise
            // one script per key is recommended. When a route uses multiple lazy load items
            // they are downloaded asynchronous however items in the array are download only after
            // the previous item is loaded. However, this example currently does not include
            // an array. See [places-demo-vue.htm] for a simliar version with an array.
            //
            // [leafletPlugin] listed below is not required as [polyfill.js] would dynamically
            // download the script on first use, however it is included here to show how
            // the `nomodule` option can be used.
            //
            window.lazyLoad = {
                leafletCss: 'https://unpkg.com/leaflet@1.5.1/dist/leaflet.css',
                leafletJs: 'https://unpkg.com/leaflet@1.5.1/dist/leaflet.js',
                leafletWeb: { module: '../js/web-components/leaflet-map.js' },
                leafletPlugin: { nomodule: '../js/plugins/leaflet.js' },
                data_list: { module: '../js/web-components/data-list.js' },
                keydownAction: { module: '../js/web-components/keydown-action-service.js' },
            };
        </script>

        <!--
            API Event Demo
            The 3 events ['app:routeChanged', 'app:contentReady', 'app:error'] are available from both
            the Web Components and [polyfill.js]. The events happen the specific Web Components and
            bubble up to the the `document` so they can be easily handled from JavaScript on the page.
        -->
        <script>
            (function() {
                'use strict';
                var isIE = (navigator.userAgent.indexOf('Trident/') !== -1);

                function log(text, color) {
                    if (isIE) {
                        console.log(text);
                    } else {
                        console.log('%c' + text, 'color:' + color + '; font-weight:bold;');
                    }
                }

                // Show a message in the console. This function gets called from event
                // attributes <url-route>[onload] and <json-data>[onready].
                // This shows how the attributes can be used to call custom JavaScript functions.
                window.showMessage = function(text) {
                    log(text, 'orange');
                };

                // To exclude event log during development comment out the next line:
                // return;

                // Handle routing changes from <url-router> or <url-router>
                document.addEventListener('app:routeChanged', function(event) {
                    log('app:routeChanged', 'blue');
                    console.log(event);

                    // When using Web Components `event.target` will be either
                    // <url-router> or <url-router> and when using [polyfill.js]
                    // the root `document` will be passed.
                    console.log(event.target);

                    // Event Detail contains URL Path and Params:
                    //   { url, urlParams }
                    console.log(event.detail);
                });

                // Handle content ready from <json-data>
                document.addEventListener('app:contentReady', function(event) {
                    log('app:contentReady', 'green');
                    console.log(event);
                    console.log(event.target); // <json-data>, <div data-control="json-data"> or `document`
                });

                // Handle errors from <json-data>, <url-router>, or <url-router>
                document.addEventListener('app:error', function(event) {
                    log('app:error', 'red');
                    console.warn(event);
                    console.log(event.target);
                    console.error(event.detail); // Error Message or Error Object
                });
            })();
        </script>
    </body>
</html>
