import{render,showError,usingWebComponentsPolyfill,escapeHtml}from"./utils.min.js";import{Format}from"./utils-format.min.js";const shadowTmpl=document.createElement("template");shadowTmpl.innerHTML="\n    <style>\n        :host { display: block; }\n        :host([hidden]) { display: none; }\n    </style>\n    <slot></slot>\n";class DataList extends HTMLElement{constructor(){if(super(),usingWebComponentsPolyfill())return;this.attachShadow({mode:"open"}).appendChild(shadowTmpl.content.cloneNode(!0)),this.setAttribute("not-setup",""),this.state={list:null}}get value(){return this.state.list}set value(e){this.state.list=e,this.renderList()}get errorClass(){return this.getAttribute("error-class")}get defaultErrorStyle(){return"color:white; background-color:red; padding:0.5rem 1rem; margin:.5rem;"}renderList(){const e=this.state.list;if(null===e||""===e)return void(this.innerHTML="");if(this.removeAttribute("not-setup"),Array.isArray(e)&&0===e.length)return;if(!Array.isArray(e))return console.error("Invalid list data type for [data-list]"),void console.log(this);let t=this.getAttribute("root-attr"),r="";if(t){t=t.split(",").map(e=>e.trim());for(const e of t){const t=e.indexOf("=");if(t>1){r+=render` ${e.substr(0,t).trim()}="${e.substr(t+1).trim()}"`}else r+=render` ${e}`}}const s=[],n=this.getAttribute("template-selector");if(null!==n){const t=document.querySelector(n);if(null===t)return console.error("Missing template from selector: "+n),void console.log(this);if("TEMPLATE"!==t.nodeName)return console.error("Element at selector ["+n+"] is not a <template>"),void console.log(this);const o=this.getAttribute("root-element");if(null!==o){if(o!==o.toLowerCase())return void showError(this,'<data-list [root-element="name"]> must be all lower-case. Value used: ['+o+"]");if(-1!==o.indexOf(" "))return void showError(this,'<data-list [root-element="name"]> cannot contain a space. Value used: ['+o+"]");if(!1!==/[&<>"'/]/.test(o))return void showError(this,'<data-list [root-element="name"]> cannot contain HTML characters that need to be escaped. Invalid characters are [& < > " \' /]. Value used: ['+o+"]");s.push(`<${o}${r}>`)}try{let r=t.innerHTML;const n=null===this.getAttribute("template-returns-html")?"render":"";n||(r=r.replace(/&amp;/g,"&").replace(/&gt;/g,">").replace(/&lt;/g,"<"));const i=this.getAttribute("list-item-name");let l;l=i?new Function(i,"index","render","escapeHtml","format","return "+n+"`"+r+"`"):new Function("item","index","render","escapeHtml","format","with(item){return "+n+"`"+r+"`}");let a=0;const u=new Format;for(const t of e){try{s.push(l(t,a,render,escapeHtml,u))}catch(e){const t="ul"===o?"li":"div";this.errorClass?s.push(render`<${t} class="${this.errorClass}">Item Error - ${e.message}</${t}>`):s.push(render`<${t} style="${this.defaultErrorStyle}">Item Error - ${e.message}</${t}>`)}a++}}catch(e){this.errorClass?s.push(render`<div class="${this.errorClass}">Error Rendering Template - ${e.message}</div>`):s.push(render`<div style="${this.defaultErrorStyle}">Error Rendering Template - ${e.message}</div>`)}null!==o&&s.push(render`</${o}>`)}else{s.push(`<ul${r}>`);for(const t of e)s.push(render`<li>${t}</li>`);s.push("</ul>")}this.innerHTML=s.join("")}}window.customElements.define("data-list",DataList);