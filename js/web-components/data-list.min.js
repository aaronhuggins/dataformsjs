import{render,showError,usingWebComponentsPolyfill,escapeHtml}from"./utils.min.js";import{Format}from"./utils-format.min.js";const shadowTmpl=document.createElement("template");shadowTmpl.innerHTML="\n    <style>\n        :host { display: block; }\n        :host([hidden]) { display: none; }\n    </style>\n    <slot></slot>\n";class DataList extends HTMLElement{constructor(){if(super(),usingWebComponentsPolyfill())return;this.attachShadow({mode:"open"}).appendChild(shadowTmpl.content.cloneNode(!0)),this.setAttribute("not-setup",""),this.state={list:null}}get value(){return this.state.list}set value(t){this.state.list=t,this.renderList()}get errorClass(){return this.getAttribute("error-class")}get defaultErrorStyle(){return"color:white; background-color:red; padding:0.5rem 1rem; margin:.5rem;"}renderList(){const t=this.state.list;if(null===t||""===t)return void(this.innerHTML="");if(this.removeAttribute("not-setup"),Array.isArray(t)&&0===t.length)return;if(!Array.isArray(t))return void showError(this,"Invalid list data type for [data-list]");let e=this.getAttribute("root-attr"),r="";if(e){e=e.split(",").map(t=>t.trim());for(const t of e){const e=t.indexOf("=");if(e>1){r+=render` ${t.substr(0,e).trim()}="${t.substr(e+1).trim()}"`}else r+=render` ${t}`}}const s=[],n=this.getAttribute("template-selector");if(null!==n){const e=document.querySelector(n);if(null===e)return void showError(this,"Missing template from selector: "+n);if("TEMPLATE"!==e.nodeName)return void showError(this,"Element at selector ["+n+"] is not a <template>");const i=this.getAttribute("root-element");if(null!==i){if(i!==i.toLowerCase())return void showError(this,'<data-list [root-element="name"]> must be all lower-case. Value used: ['+i+"]");if(-1!==i.indexOf(" "))return void showError(this,'<data-list [root-element="name"]> cannot contain a space. Value used: ['+i+"]");if(!1!==/[&<>"'/]/.test(i))return void showError(this,'<data-list [root-element="name"]> cannot contain HTML characters that need to be escaped. Invalid characters are [& < > " \' /]. Value used: ['+i+"]");s.push(`<${i}${r}>`)}try{let r=e.innerHTML;const n=null===this.getAttribute("template-returns-html")?"render":"";n||(r=r.replace(/&amp;/g,"&").replace(/&gt;/g,">").replace(/&lt;/g,"<"));const o=this.getAttribute("list-item-name");let l;l=o?new Function(o,"index","render","escapeHtml","format","return "+n+"`"+r+"`"):new Function("item","index","render","escapeHtml","format","with(item){return "+n+"`"+r+"`}");let a=0;const u=new Format;for(const e of t){try{s.push(l(e,a,render,escapeHtml,u))}catch(t){const e="ul"===i?"li":"div";this.errorClass?s.push(render`<${e} class="${this.errorClass}">Item Error - ${t.message}</${e}>`):s.push(render`<${e} style="${this.defaultErrorStyle}">Item Error - ${t.message}</${e}>`)}a++}}catch(t){this.errorClass?s.push(render`<div class="${this.errorClass}">Error Rendering Template - ${t.message}</div>`):s.push(render`<div style="${this.defaultErrorStyle}">Error Rendering Template - ${t.message}</div>`)}null!==i&&s.push(render`</${i}>`)}else{s.push(`<ul${r}>`);for(const e of t)s.push(render`<li>${e}</li>`);s.push("</ul>")}this.innerHTML=s.join("")}}window.customElements.define("data-list",DataList);