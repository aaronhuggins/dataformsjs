import{render,showError,usingWebComponentsPolyfill}from"./utils.min.js";import{Format}from"./utils-format.min.js";const shadowTmpl=document.createElement("template");shadowTmpl.innerHTML="\n    <style>\n        :host { display: block; }\n        :host([hidden]) { display: none; }\n    </style>\n    <slot></slot>\n";class DataList extends HTMLElement{constructor(){if(super(),usingWebComponentsPolyfill())return;this.attachShadow({mode:"open"}).appendChild(shadowTmpl.content.cloneNode(!0)),this.setAttribute("not-setup",""),this.state={list:null}}get value(){return this.state.list}set value(t){this.state.list=t,this.renderList()}get errorClass(){return this.getAttribute("error-class")}get defaultErrorStyle(){return"color:white; background-color:red; padding:0.5rem 1rem; margin:.5rem;"}renderList(){const t=this.state.list;if(null===t||""===t)return void(this.innerHTML="");if(Array.isArray(t)&&0===t.length)return void this.removeAttribute("not-setup");if(!Array.isArray(t))return console.error("Invalid list data type for [data-list]"),console.log(this),void this.removeAttribute("not-setup");let e=this.getAttribute("root-attr"),r="";if(e){e=e.split(",").map(t=>t.trim());for(const t of e){const e=t.indexOf("=");if(e>1){r+=render` ${t.substr(0,e).trim()}="${t.substr(e+1).trim()}"`}else r+=render` ${t}`}}const s=[],o=this.getAttribute("template-selector");if(null!==o){const e=document.querySelector(o);if(null===e)return console.error("Missing template from selector: "+o),console.log(this),void this.removeAttribute("not-setup");if("TEMPLATE"!==e.nodeName)return console.error("Element at selector ["+o+"] is not a <template>"),console.log(this),void this.removeAttribute("not-setup");const n=this.getAttribute("root-element");if(null!==n){if(n!==n.toLowerCase())return showError(this,'<data-list [root-element="name"]> must be all lower-case. Value used: ['+n+"]"),void this.removeAttribute("not-setup");if(-1!==n.indexOf(" "))return showError(this,'<data-list [root-element="name"]> cannot contain a space. Value used: ['+n+"]"),void this.removeAttribute("not-setup");if(!1!==/[&<>"'/]/.test(n))return showError(this,'<data-list [root-element="name"]> cannot contain HTML characters that need to be escaped. Invalid characters are [& < > " \' /]. Value used: ['+n+"]"),void this.removeAttribute("not-setup");s.push(`<${n}${r}>`)}try{const r=e.innerHTML.replace(/&amp;/g,"&").replace(/&gt;/g,">").replace(/&lt;/g,"<"),o=new Function("item","index","render","format","with(item){return render`"+r+"`}");let i=0;const l=new Format;for(const e of t){try{s.push(o(e,i,render,l))}catch(t){const e="ul"===n?"li":"div";this.errorClass?s.push(render`<${e} class="${this.errorClass}">Item Error - ${t.message}</${e}>`):s.push(render`<${e} style="${this.defaultErrorStyle}">Item Error - ${t.message}</${e}>`)}i++}}catch(t){this.errorClass?s.push(render`<div class="${this.errorClass}">Error Rendering Template - ${t.message}</div>`):s.push(render`<div style="${this.defaultErrorStyle}">Error Rendering Template - ${t.message}</div>`)}null!==n&&s.push(render`</${n}>`)}else{s.push(`<ul${r}>`);for(const e of t)s.push(render`<li>${e}</li>`);s.push("</ul>")}this.innerHTML=s.join(""),this.removeAttribute("not-setup")}}window.customElements.define("data-list",DataList);