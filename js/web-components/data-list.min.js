import{render}from"./utils.min.js";const shadowTmpl=document.createElement("template");shadowTmpl.innerHTML="\n    <style>:host { display:block; }</style>\n    <slot></slot>\n";class DataList extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}).appendChild(shadowTmpl.content.cloneNode(!0)),this.setAttribute("not-setup",""),this.state={list:null}}get value(){return this.state.list}set value(t){this.state.list=t,this.renderList()}renderList(){const t=this.state.list;if(null===t||""===t)return void(this.innerHTML="");if(Array.isArray(t)&&0===t.length)return void this.removeAttribute("not-setup");if(!Array.isArray(t))return console.error("Invalid list data type for [data-list]"),console.log(this),void this.removeAttribute("not-setup");const e=[],s=this.getAttribute("template-selector"),r=this.getAttribute("root-class");if(null!==s){const n=document.querySelector(s);if(null===n)return console.error("Missing template from selector: "+s),console.log(this),void this.removeAttribute("not-setup");if("TEMPLATE"!==n.nodeName)return console.error("Element at selector ["+s+"] is not a <template>"),console.log(this),void this.removeAttribute("not-setup");const o=this.getAttribute("root-element");null!==o&&(null===r?e.push(render`<${o}>`):e.push(render`<${o} class="${r}">`));const i=new Function("item","index","render","with(item){return render`"+n.innerHTML+"`}");let l=0;for(const s of t)e.push(i(s,l,render)),l++;null!==o&&e.push(render`</${o}>`)}else{null===r?e.push("<ul>"):e.push(render`<ul class="${r}">`);for(const s of t)e.push(render`<li>${s}</li>`);e.push("</ul>")}this.innerHTML=e.join(""),this.removeAttribute("not-setup")}}window.customElements.define("data-list",DataList);