import{showError}from"./utils.min.js";const markdownCache=[],maxCacheSize=100;function saveMarkdownToCache(e,t,r){markdownCache.length>100&&(markdownCache.length=0);for(let t=0,r=markdownCache.length;t<r;t++)if(e===markdownCache[t].url)return;markdownCache.push({url:e,content:t,errorMessage:r})}function getMarkdownFromCache(e){for(let t=0,r=markdownCache.length;t<r;t++)if(e===markdownCache[t].url)return markdownCache[t];return null}const shadowTmpl=document.createElement("template");shadowTmpl.innerHTML="\n    <style>\n        :host { display: block; }\n        :host([hidden]) { display: none; }\n    </style>\n    <slot></slot>\n";let returnCode=!1;function highlight(e,t){if(void 0===window.hljs)return returnCode?e:"";if(t&&hljs.getLanguage(t))try{return hljs.highlight(t,e).value}catch(e){console.warn(e)}try{return hljs.highlightAuto(e).value}catch(e){console.warn(e)}return returnCode?e:""}class MarkdownContent extends HTMLElement{constructor(){super();this.attachShadow({mode:"open"}).appendChild(shadowTmpl.content.cloneNode(!0)),this.content=null,this.errorMessage=null}connectedCallback(){const e=this.querySelector('script[type="text/markdown"]');e&&(this.content=e.innerHTML),this.render()}static get observedAttributes(){return["url","show-source"]}attributeChangedCallback(e,t,r){switch(e){case"url":t!==r&&this.fetch();break;case"show-source":t!==r&&this.render()}}clearContent(){this.content=null,this.render()}get url(){return this.getAttribute("url")}set url(e){this.setAttribute("url",e)}get showSource(){return this.hasAttribute("show-source")}set showSource(e){e?this.setAttribute("show-source",""):this.removeAttribute("show-source")}get loadOnlyOnce(){return this.hasAttribute("load-only-once")}set loadOnlyOnce(e){e?this.setAttribute("load-only-once",""):this.removeAttribute("load-only-once")}get value(){return this.content}set value(e){this.content=e,this.render()}fetch(){const e=this.url;if(!e)return showError(this,"Error - Unable to show Markdown content because [url] is not set."),void this.dispatchRendered();if(this.loadOnlyOnce){const t=getMarkdownFromCache(e);if(t)return this.content=t.content,this.errorMessage=t.errorMessage,void this.render()}const t=this.getAttribute("loading-selector");if(t){const e=document.querySelector(t);e?(this.innerHTML="",this.appendChild(e.content.cloneNode(!0))):console.warn(`Could not find template from <${this.tagName.toLowerCase()} [loading-selector="${t}"]>.`)}fetch(e).then((t=>{const r=t.status;if(r>=200&&r<300||304===r)return Promise.resolve(t);{const n=`Error loading markdown content from [${e}]. Server Response Code: ${r}, Response Text: ${t.statusText}`;return Promise.reject(n)}})).then((e=>e.text())).then((e=>{this.content=e,this.errorMessage=null,this.render()})).catch((e=>{this.errorMessage=e,this.render()})).finally((()=>{this.loadOnlyOnce&&saveMarkdownToCache(e,this.content,this.errorMessage)}))}dispatchRendered(){this.dispatchEvent(new Event("app:markdownRendered",{bubbles:!0}))}render(){if(this.errorMessage)return showError(this,this.errorMessage),void this.dispatchRendered();if(null===this.content)return void(this.innerHTML="");if(this.showSource)return this.innerHTML="<pre></pre>",this.querySelector("pre").textContent=this.content,void this.dispatchRendered();let e,t;if(returnCode=!1,window.marked)returnCode=!0,marked.setOptions({highlight:highlight}),e=marked(this.content);else if(window.markdownit)t=markdownit({html:!0,linkify:!0,typographer:!0,highlight:highlight}),window.markdownitEmoji&&t.use(markdownitEmoji),e=t.render(this.content);else{if(!window.remarkable)return showError(this,"Error - Unable to show Markdown content because a Markdown JavaScript library was not found on the page."),void this.dispatchRendered();t=new remarkable.Remarkable({html:!0,typographer:!0,highlight:highlight}).use(remarkable.linkify),e=t.render(this.content)}if(void 0!==window.DOMPurify&&(e=DOMPurify.sanitize(e)),this.innerHTML=e,void 0!==window.hljs){const e=this.querySelectorAll('code[class*="language-"]');for(let t of e)t.classList.add("hljs")}const r=this.getAttribute("link-target"),n=this.getAttribute("link-rel");if(r||n){const e=this.querySelectorAll("a");for(const t of e)t.target=r||t.target,t.rel=n||t.rel}const o=this.getAttribute("link-root-url");if(o){const e=this.querySelectorAll('a:not([href^="http:"]):not([href^="https:"])');for(const t of e){const e=t.getAttribute("href");t.setAttribute("data-original-href",e),t.setAttribute("href",o+e)}}this.dispatchRendered()}}window.customElements.define("markdown-content",MarkdownContent);