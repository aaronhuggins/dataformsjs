import{defineExtendsPolyfill}from"./utils.min.js";class SpaLinks extends HTMLElement{constructor(){super(),this.updateLinks=this.updateLinks.bind(this)}connectedCallback(){document.addEventListener("app:routeChanged",this.updateLinks)}disconnectedCallback(){document.removeEventListener("app:routeChanged",this.updateLinks)}static get observedAttributes(){return["item-selector","active-class"]}attributeChangedCallback(t){SpaLinks.observedAttributes.includes(t)&&this.updateLinks()}get itemSelector(){const t=this.getAttribute("item-selector");return null===t?"a":t}get activeClass(){const t=this.getAttribute("active-class");return null===t?"active":t}updateLinks(){let t=this.querySelectorAll(this.itemSelector+"."+this.activeClass);for(const e of t)e.classList.remove(this.activeClass);const e=document.querySelector("url-router");let s;s=null!==e&&"history"!==e.getAttribute("mode")?""===window.location.hash?"#/":window.location.hash:window.location.pathname,t=this.querySelectorAll(this.itemSelector);for(const e of t){const t="A"===e.nodeName?e:e.querySelector("a");!t||t.getAttribute("href")!==s||t!==e&&t.parentNode!==e||e.classList.add(this.activeClass)}}}window.customElements.define("spa-links",SpaLinks,{extends:"nav"}),defineExtendsPolyfill("spa-links","nav",(t=>{SpaLinks.prototype.updateLinks.apply(t)}));