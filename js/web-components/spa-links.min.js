import{defineExtendsPolyfill}from"./utils.min.js";class SpaLinks extends HTMLElement{constructor(){super(),this.updateLinks=this.updateLinks.bind(this)}connectedCallback(){document.addEventListener("app:routeChanged",this.updateLinks)}disconnectedCallback(){document.removeEventListener("app:routeChanged",this.updateLinks)}static get observedAttributes(){return["item-selector","active-class"]}attributeChangedCallback(t){SpaLinks.observedAttributes.includes(t)&&this.updateLinks()}get itemSelector(){const t=this.getAttribute("item-selector");return null===t?"a":t}get activeClass(){const t=this.getAttribute("active-class");return null===t?"active":t}updateLinks(){let t,e=this.querySelectorAll(this.itemSelector+"."+this.activeClass);for(const t of e)t.classList.remove(this.activeClass);t=null!==document.querySelector("url-hash-router")?""===window.location.hash?"#/":window.location.hash:window.location.pathname,e=this.querySelectorAll(this.itemSelector);for(const s of e){const e="A"===s.nodeName?s:s.querySelector("a");!e||e.getAttribute("href")!==t||e!==s&&e.parentNode!==s||s.classList.add(this.activeClass)}}}window.customElements.define("spa-links",SpaLinks,{extends:"nav"}),defineExtendsPolyfill("spa-links","nav",t=>{SpaLinks.prototype.updateLinks.apply(t)});