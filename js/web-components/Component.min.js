export{escapeHtml,render as html}from"./utils.min.js";export class Component extends HTMLElement{constructor(){super();const t=this.attachShadow({mode:"open"}),e=void 0===this.constructor.css?"":this.constructor.css,s=document.createElement("template");s.innerHTML=`\n            <style>\n                :host { display: block; }\n                :host([hidden]) { display: none; }\n                ${e}\n            </style>\n            <slot></slot>\n        `,t.appendChild(s.content.cloneNode(!0)),this.state={},this._wasLoaded=!1}connectedCallback(){if(!this._wasLoaded){const t=this.constructor.props;if("object"==typeof t)for(const e in t)t.hasOwnProperty(e)&&(void 0===this.state[e]&&(this.state[e]=t[e]),this.hasOwnProperty(e)||Object.defineProperty(this,e,{get:function(){return this.state[e]},set:function(t){this.state[e]!==t&&(this.state[e]=t,this.update())}}));this._wasLoaded=!0}this.update()}static get observedAttributes(){return void 0===this.props?[]:Object.keys(this.props)}attributeChangedCallback(t,e,s){const o=this.constructor.props;o&&void 0!==o[t]&&e!==s&&(this.state[t]=s,this.update())}update(){this.innerHTML=void 0===this.render?"":this.render(),this.onRendered&&this.onRendered()}}