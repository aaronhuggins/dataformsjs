import React from"react";let _supportsPassive=!1;try{const e=Object.defineProperty({},"passive",{get:function(){return _supportsPassive=!0,!0}});window.addEventListener("testPassive",null,e),window.removeEventListener("testPassive",null,e)}catch(e){}function BasicImage(e){return React.createElement("img",{src:e.thumbnail,alt:e.title,onClick:e.onClick})}export default class ImageGallery extends React.Component{constructor(e){super(e),this.onClick=this.onClick.bind(this),this.handleDocKeyDown=this.handleDocKeyDown.bind(this),this.preloadNextImages=this.preloadNextImages.bind(this),this.hideOverlay=this.hideOverlay.bind(this),this.changeImage=this.changeImage.bind(this),this.overlayStyleId="image-gallery-css",this.overlayStyleCss="\n            body.blur { filter: blur(3px); }\n\n            .image-gallery-overlay {\n                position: fixed;\n                top: 0;\n                left: 0;\n                right: 0;\n                bottom: 0;\n                background-color: rgba(255,255,255,.8);\n                cursor: pointer;\n                display: flex;\n                justify-content: center;\n                align-items: center;\n                flex-direction: column;\n            }\n\n            .image-gallery-overlay .image-gallery-loading {\n                font-weight: bold;\n                padding: 1em 2em;\n                background-color: rgba(255, 255, 255, .8);\n                position: absolute;\n            }\n\n            .image-gallery-overlay img {\n                max-width: 100%;\n                max-height: 100%;\n                flex-shrink: 0;\n            }\n\n            .image-gallery-overlay div {\n                position: absolute;\n                bottom: 0;\n                left: 0;\n                right: 0;\n                z-index: 2;\n                font-weight: bold;\n                display: flex;\n                justify-content: space-between;\n                width: 100%;\n            }\n\n            .image-gallery-overlay div span {\n                padding: 10px 20px;\n                background-color: rgba(255,255,255,.4);\n            }\n\n            @media (min-width: 1300px) {\n                .image-gallery-overlay div {\n                    left: calc((100% - 1300px) /2);\n                    right: auto;\n                    max-width: 1300px;\n                }\n            }\n        ",this.imageIndex=null,this.overlay=null,this.overlayImg=null,this.overlayTitle=null,this.overlayIndex=null,this.overlayLoading=null,this.touchStartX=null,this.loadingTimeoutId=null,this.loadingText=e.loadingText?e.loadingText:"Loading...",this.loadingTimeout=e.loadingTimeout?e.loadingTimeout:1e3,this.loadedImages=new Set,this.state={images:e.images}}onClick(e){let t=e.target.src;t||(t=e.target.getAttribute("data-image")),this.imageIndex=-1;for(let e=0,i=this.state.images.length;e<i;e++)if(this.state.images[e].thumbnail===t){this.imageIndex=e;break}this.showOverlay()}loadCss(){let e=document.getElementById(this.overlayStyleId);null===e&&((e=document.createElement("style")).id=this.overlayStyleId,e.innerHTML=this.overlayStyleCss,document.head.appendChild(e))}showOverlay(){const e=this.state.images[this.imageIndex].image,t=this.state.images[this.imageIndex].title;this.loadCss(),this.overlay=document.createElement("div"),this.overlay.className="image-gallery-overlay",this.overlayLoading=document.createElement("span"),this.overlayLoading.className="image-gallery-loading",this.overlayLoading.textContent=this.loadingText,this.overlayLoading.setAttribute("hidden",""),this.overlay.appendChild(this.overlayLoading),this.overlayImg=document.createElement("img"),this.overlayImg.addEventListener("load",()=>{this.loadedImages.add(e),this.clearLoadingTimer(),this.overlayLoading.setAttribute("hidden",""),this.preloadNextImages()}),this.overlayImg.src=e,this.overlay.appendChild(this.overlayImg);const i=document.createElement("div");this.overlayTitle=document.createElement("span"),this.overlayTitle.textContent=t,this.overlayTitle.style.display=t?"":"none",i.appendChild(this.overlayTitle),this.overlayIndex=document.createElement("span"),this.overlayIndex.textContent=`${this.imageIndex+1}/${this.state.images.length}`,i.appendChild(this.overlayIndex),this.overlay.appendChild(i),this.addOverlayEvents(),document.documentElement.appendChild(this.overlay),document.querySelector("body").classList.add("blur"),this.startLoadingTimer()}startLoadingTimer(){this.clearLoadingTimer(),this.loadingTimeoutId=window.setTimeout(()=>{this.loadingTimeoutId=null,null!==this.overlayLoading&&this.overlayLoading.removeAttribute("hidden")},this.loadingTimeout)}clearLoadingTimer(){null!==this.loadingTimeoutId&&(window.clearTimeout(this.loadingTimeoutId),this.loadingTimeoutId=null)}addOverlayEvents(){this.overlay.onclick=(e=>{if("ontouchstart"in window){const t=window.innerHeight,i=t/4,a=t-i;if(e.clientY>=i&&e.clientY<=a)return}this.hideOverlay()}),document.addEventListener("keydown",this.handleDocKeyDown),this.overlay.addEventListener("touchstart",e=>{this.touchStartX=e.changedTouches[0].screenX},!!_supportsPassive&&{passive:!0}),this.overlay.addEventListener("touchend",e=>{var t=e.changedTouches[0].screenX;t>this.touchStartX?this.changeImage("left"):t<this.touchStartX&&this.changeImage("right")})}handleDocKeyDown(e){switch(e.key){case"ArrowLeft":case"Left":this.changeImage("left");break;case"ArrowRight":case"Right":this.changeImage("right");break;case"Escape":case"Esc":this.hideOverlay()}}componentWillUnmount(){this.hideOverlay()}hideOverlay(){this.clearLoadingTimer(),this.overlay.parentNode.removeChild(this.overlay),this.overlayLoading=null,this.overlayIndex=null,this.overlayTitle=null,this.overlayImg=null,this.overlay=null,document.removeEventListener("keydown",this.handleDocKeyDown),document.querySelector("body").classList.remove("blur")}preloadNextImages(){if(-1===window.Image.toString().indexOf("[native code]"))return void console.warn("Images for <ImageGallery> cannot be preloaded because the app defined a <Image> component that overwrote the browsers native [Image] class.");const e=this.state.images.length;let t=this.imageIndex-1;if(-1===t&&(t=e-1),t!==this.imageIndex){const e=this.state.images[t].image;if(e&&!this.loadedImages.has(e)){const t=new Image;t.onload=(()=>{this.loadedImages.add(e)}),t.src=e}}let i=this.imageIndex+1;if(i===e&&(i=0),i!==this.imageIndex){const e=this.state.images[i].image;if(e&&!this.loadedImages.has(e)){const t=new Image;t.onload=(()=>{this.loadedImages.add(e)}),t.src=e}}}changeImage(e){const t=this.state.images.length;this.imageIndex="right"===e?this.imageIndex===t-1?0:this.imageIndex+1:0===this.imageIndex?t-1:this.imageIndex-1;const i=this.state.images[this.imageIndex].title;this.overlayImg.src="",this.overlayImg.src=this.state.images[this.imageIndex].image,this.overlayTitle.textContent=i,this.overlayTitle.style.display=i?"":"none",this.overlayIndex.textContent=`${this.imageIndex+1}/${t}`,this.startLoadingTimer()}render(){let e=this.props.template;return void 0===e&&(e=void 0!==this.props.children?this.props.children:React.createElement(BasicImage)),this.state.images.map(t=>React.cloneElement(e,Object.assign({},t,{onClick:this.onClick})))}};