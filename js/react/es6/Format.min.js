export default class Format{number(r){return formatNumber(r,{})}currency(r,n){return formatNumber(r,{style:"currency",currency:n,maximumFractionDigits:2})}percent(r,n=0){return formatNumber(r,{style:"percent",maximumFractionDigits:n,minimumFractionDigits:n})}date(r){return formatDateTime(r,{})}dateTime(r){return formatDateTime(r,{year:"numeric",month:"numeric",day:"numeric",hour:"numeric",minute:"numeric",second:"numeric"})}time(r){return formatDateTime(r,{hour:"numeric",minute:"numeric",second:"numeric"})}};function isNumber(r){return!isNaN(parseFloat(r))&&isFinite(r)}function formatDateTime(r,n){if(void 0===window.Intl)return r;try{if(r instanceof Date)return new Intl.DateTimeFormat(navigator.language,n).format(r);if(/^\d{4}-\d{2}-\d{2}$/.test(r)){const e=r.split("-").map(function(r){return parseInt(r,10)}),t=new Date(e[0],e[1]-1,e[2]);return new Intl.DateTimeFormat(navigator.language,n).format(t)}{const e=new Date(r);return new Intl.DateTimeFormat(navigator.language,n).format(e)}}catch(e){return console.warn("Error formatting Date/Time Value:"),console.log(navigator.language),console.log(n),console.log(r),console.log(e),"Error"}}function formatNumber(r,n){const e=navigator.language?navigator.language:navigator.userLanguage;if(null===r||""===r)return null;if(!isNumber(r))return console.warn("Warning value specified in DateFormsJS function formatNumber() is not a number:"),console.log(r),r;if(void 0===window.Intl){const t=n.style?n.style:null,o=n.maximumFractionDigits?n.maximumFractionDigits:0;if("percent"===t)return(100*r).toFixed(o)+"%";let a=null,i=null,u=null;switch(e){case"en-us":a=",",i=".",u="$"}if(null!==a){const n=r.toString().split(".");n[0]=n[0].replace(/\B(?=(\d{3})+(?!\d))/g,",");const e=n.join(i);return"currency"===t?u+e:e}return r}try{return new Intl.NumberFormat(e,n).format(r)}catch(t){return console.warn("Error formatting Numeric Value:"),console.log(e),console.log(n),console.log(r),console.log(t),"Error"}}