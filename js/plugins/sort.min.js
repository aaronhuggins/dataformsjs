!function(){"use strict";var h={sortCompare:function(e,t){return null===e.type&&null!==t.type?-1:null===t.type&&null!==e.type?1:null===e.type&&null===t.type?0:"number"===e.type&&"number"!==t.type?-1:"number"===t.type&&"number"!==e.type?1:"number"===e.type&&"number"===t.type?e.value-t.value:"date"===e.type&&"date"!==t.type?-1:"date"===t.type&&"date"!==e.type?1:"date"===e.type&&"date"===t.type?e.value<t.value?-1:e.value>t.value?1:0:"string"===e.type&&"string"===t.type?void 0!==e.value.localeCompare?e.value.localeCompare(t.value):e.value<t.value?-1:e.value>t.value?1:0:(console.warn("A code change from [sort.js] impacted sorting and caused an expected error so the data may appear out of order. Please review your code changes"),0)},sortColumn:function(e){var t=e.target,a=t&&t.parentElement&&t.parentElement.parentElement?t.parentElement.parentElement.parentElement:null;if("TH"!==t.tagName&&"TD"!==t.tagName)return console.warn("sort.sortColumn() was called with an invalid element. If called manually the cell needs to be passed."),void console.log(t);if(null!=a&&"TABLE"!==a.tagName)return console.warn("sort.sortColumn() was called with an invalid element. If called manually the table cell of the last row from the table header should be used."),void console.log(t);var e=a.getAttribute("data-sort-column"),l=t.cellIndex,t="asc";null!==e&&parseInt(e,10)===l&&(t="asc"===a.getAttribute("data-sort-order")?"desc":"asc");for(var o=a.tBodies[0],r=o.rows,n=[],s=0,u=r.length;s<u;s++){var d,c,i=r[s].cells[l];void 0!==i&&(c=typeof(d=(null!==(c=i.getAttribute("data-value"))?c:i.textContent).trim()),""===d?d=null:isNaN(d)?(i=new Date(d),isNaN(i.getTime())?d=void 0!==d.toLocaleLowerCase?d.toLocaleLowerCase():d.toLowerCase():(d=i,c="date")):d=parseFloat(d),n.push({row:r[s],value:d,type:null===d?null:c}))}n.sort(h.sortCompare),"desc"===t&&n.reverse();for(var p=a.getAttribute("data-sort-class-odd"),m=a.getAttribute("data-sort-class-even"),v=p&&m,y=0,b=0,g=n.length;b<g;b++){var f=n[b].row;v&&"none"!==f.style.display&&(++y%2==0?(f.classList.add(m),f.classList.remove(p)):(f.classList.add(p),f.classList.remove(m))),o.appendChild(f)}a.setAttribute("data-sort-column",l),a.setAttribute("data-sort-order",t)},setupTables:function(e){e=(e||document).querySelectorAll("table[data-sort]:not([data-sort-setup])");Array.prototype.forEach.call(e,function(e){if(null!==e.tHead){if(0===e.tHead.rows.length)return console.warn("Unable to setup sorting for table because the <thead> element contained now rows"),void console.log(e);if(0===e.tBodies.length)return console.warn("Unable to setup sorting for table because the <tbody> element is missing"),void console.log(e);if(1!==e.tBodies.length)return console.warn("Unable to setup sorting for table because there can only be one <tbody> element for the table"),void console.log(e);for(var t=e.tHead.rows[e.tHead.rows.length-1],a=0,l=t.cells.length;a<l;a++)t.cells[a].addEventListener("click",h.sortColumn),t.cells[a].style.cursor="pointer";e.setAttribute("data-sort-setup","")}})},onRendered:function(e){this.setupTables(e)}};app.addPlugin("sort",h)}();