!function(){"use strict";var L={sortCompare:function(e,t){return null===e.type&&null!==t.type?-1:null===t.type&&null!==e.type?1:null===e.type&&null===t.type?0:"number"===e.type&&"number"!==t.type?-1:"number"===t.type&&"number"!==e.type?1:"number"===e.type&&"number"===t.type?e.value-t.value:"date"===e.type&&"date"!==t.type?-1:"date"===t.type&&"date"!==e.type?1:"date"===e.type&&"date"===t.type?e.value<t.value?-1:e.value>t.value?1:0:"string"===e.type&&"string"===t.type?void 0!==e.value.localeCompare?e.value.localeCompare(t.value):e.value<t.value?-1:e.value>t.value?1:0:(console.warn("A code change from [sort.js] impacted sorting and caused an expected error so the data may appear out of order. Please review your code changes"),0)},sortColumn:function(e){var t=e.target,a=t&&t.parentElement&&t.parentElement.parentElement?t.parentElement.parentElement.parentElement:null;if("TH"!==t.tagName&&"TD"!==t.tagName)return console.warn("sort.sortColumn() was called with an invalid element. If called manually the cell needs to be passed."),void console.log(t);if(null!=a&&"TABLE"!==a.tagName)return console.warn("sort.sortColumn() was called with an invalid element. If called manually the table cell of the last row from the table header should be used."),void console.log(t);var l=a.getAttribute("data-sort-column"),o=t.cellIndex,r="asc";null!==l&&parseInt(l,10)===o&&(r="asc"===a.getAttribute("data-sort-order")?"desc":"asc");for(var n=a.tBodies[0],s=n.rows,u=[],d=0,i=s.length;d<i;d++){var c,p,m,v,y=s[d].cells[o];void 0!==y&&(m=typeof(p=null!==(c=y.getAttribute("data-value"))?c.trim():y.textContent.trim()),""===p?p=null:isNaN(p)?(v=new Date(p),isNaN(v.getTime())?p=void 0!==p.toLocaleLowerCase?p.toLocaleLowerCase():p.toLowerCase():(p=v,m="date")):p=parseFloat(p),u.push({row:s[d],value:p,type:null===p?null:m}))}u.sort(L.sortCompare),"desc"===r&&u.reverse();for(var b=a.getAttribute("data-sort-class-odd"),g=a.getAttribute("data-sort-class-even"),f=b&&g,h=0,w=0,C=u.length;w<C;w++){var A=u[w].row;f&&"none"!==A.style.display&&(++h%2==0?(A.classList.add(g),A.classList.remove(b)):(A.classList.add(b),A.classList.remove(g))),n.appendChild(A)}a.setAttribute("data-sort-column",o),a.setAttribute("data-sort-order",r)},setupTables:function(e){var t=(e||document).querySelectorAll("table[data-sort]:not([data-sort-setup])");Array.prototype.forEach.call(t,function(e){if(null!==e.tHead){if(0===e.tHead.rows.length)return console.warn("Unable to setup sorting for table because the <thead> element contained now rows"),void console.log(e);if(0===e.tBodies.length)return console.warn("Unable to setup sorting for table because the <tbody> element is missing"),void console.log(e);if(1!==e.tBodies.length)return console.warn("Unable to setup sorting for table because there can only be one <tbody> element for the table"),void console.log(e);for(var t=e.tHead.rows[e.tHead.rows.length-1],a=0,l=t.cells.length;a<l;a++)t.cells[a].addEventListener("click",L.sortColumn),t.cells[a].style.cursor="pointer";e.setAttribute("data-sort-setup","")}})},onRendered:function(e){this.setupTables(e)}};app.addPlugin("sort",L)}();