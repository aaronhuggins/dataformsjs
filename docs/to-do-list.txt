
TODO List

--------------------------------------------------------------------------
|
|   In General:
|
|   *) Translations
|      https://github.com/dataformsjs/dataformsjs/blob/master/docs/i18n-translations.md
|   *) More Examples (for all or most scripts and features)
|   *) More Documentation
|   *) More Unit Testing
|   *) Additional Scripts and Features
|
|   There is no priority to this list.
|   All contributions are welcome.
|
|   Generally every item in this list is of low priority and more of a
|   wish list item rather than an actual need. The highest priority items
|   are at the top and start with `**)`. Development typically occurs
|   based on the need of real world production sites and apps.
|
--------------------------------------------------------------------------

**) Finish Web Component Updates
    - Many updates are being made and in active development (2020-10-07).
        See the [CHANGELOG.md] or recent commmits for full details.
        Since changes are currently in active development the related features may
        go through additional changes without warning.
    - Until updates are finished many of the web component examples will be pointing
        to local build files rather than CDN.
    - These updates will likely occur over a week or several weeks or longer before being published to npm.
    - In general:
        - Add ability to polyfill for old browsers [js/web-components/polyfill.js] using the main framework.
        - <data-table> - New <template> option
        - <json-data> Attributes with [data-bind] can also include an
            optional [data-format="number|date|dateTime|{function}"]
    - Items currently needed before this will be published to npm
        - Review all comments in [js/web-components/polyfill.js] and handle all issues.
            The file is working but still in active development.
        - The standard Framework includes `app.settings.lazyTemplateSelector` which is used to show an optional
            loading template while scripts and HTML content is being downloaded. In general the content is
            very small so it goes un-noticed on a desktop or fast mobile connection. On a slow mobile connection
            the delay can be noticeable so a similar feature should be added for Web Components.
            For a starting point this could be added as:
                <url-hash-router loading-template-selector="#template">
                <url-router loading-template-selector="#template">
            Ideally this will also be added to <json-data><is-loading template-selector="#template"> as well.
        - Add ability to lazy load scripts based on route <url-hash-route> and <url-route> similar to how
            the standard Frameworks works. A good test will be the [examples/places-demo-web.htm] file
            that always loads [https://unpkg.com/leaflet@1.5.1/dist/leaflet.js]. The format for defining
            this needs to still be determined. The main framework uses [app.lazyLoad = {}]. The web components
            will likely check for the same format if [window.lazyLoad] is defined by the app.
        - Rename [jsPlugins.js]`refreshJsPlugins()` as `refreshPlugins()` to match standard Framework
            * Breaking change because the names should match. Before the inital release `app.refreshPlugins()`
                was named `app.refreshJsPlugins()` so this is a bug
        - New demo page to test all features of the new [utils-format.js] file
        - Consider (likely) add multiple optional template options to <data-table>
            - If only <template> then use for row items (current)
            - Also support:
                <template data-header>
                    - In the places demo this can be use to right align text on number columns in the header
                <template data-item>
                <template data-footer>
            - How to do this using the built-in <slot>? See if it makes sense using <slot>
        - Consider [document.addEventListener('app:contentReady'] or something similar for
            the main API as it makes custom code much easier. Currently this is a feature
            of the new [polyfill.js]. Also need new example page showing how this works.
            - Likely many updates will be made in [examples/web-components-api.htm] for API examples.
            - Commented <scripts> at the bottom of [examples/places-demo-web.htm] should
                be merged to [examples/web-components-api.htm] or documented in a new sperate example.
        - Decide if [Format.number()] with static functions or instead use `new Format()` then pass `format`.
            This may be decided based on browser support for static functions. More research is needed.
        - Also related decide if
                import { Format } from './utils-format.js';
            Should be merged with the main './utils.js' to avoid an extra HTTP request. If all code
            that imports from './utils.js' also imports Format then they should probably be merged.
        - At a minimum the new script Polyfill scripts needs to handle IE 11, older Safari (example iOS 9), UC Browser.
            iOS 9 support because older devices such as iPad 2 can't upgrade past it and iPhone 6
            phones that are not upgraded still use it.
        - Add [template-selector] to <data-table> similar to <data-list> and vice-versa add ability
            to specify <template> inside of <data-list>
        - Currently pages use code like this:
            <script type="module" src="js/web-components/url-hash-router.min.js"></script>
            <script type="module" src="js/web-components/json-data.min.js"></script>
            ...
            <script nomodule src="js/web-components/safari-nomodule.min.js"></script>
            <script nomodule src="js/web-components/old-browser-warning.min.js"></script>
            - Ideally [safari-nomodule.min.js] and [old-browser-warning.min.js] would be replaced
                by a single polyfill script:
                    <script nomodule src="js/web-components/polyfill.min.js"></script>
        - Related to current updates [dataformsjs\examples\html\cities-web.htm] now shows
            both Meters and Feet using `formatElevation(elevation)`. The other demos currently
            display meters only but should also be updated to display both.
        - Handle and remove all `NOTE` comments in [polyfill.js] before npm publishing
        - Provide examples of how [polyfill.js].[getRootUrl()] works for documentation.
            - Or add a markdown doc for it
            - Here is an example of an defining a custom URL from the app:
                <script>
                    window.dataformsjsUrl = 'http://127.0.0.1:8080/js/';
                    window.dataformsjsMinFiles = false; // Optional (defaults to `true`)
                </script>
                <script nomodule src="../js/web-components/polyfill.js"></script>
            - By default the path will be determined from where [/web-components/polyfill.js] is defined:
                <script src="../js/web-components/polyfill.min.js"></script>
                    [*.min.js] Framework files will be downloaded
                <script src="../js/web-components/polyfill.js"></script>
                    Full [*.js] Framework files will be downloaded
        - [/js/web-components/safari-nomodule.min.js] will be removed from all templates but the file will still be kept
            [/js/web-components/old-browser-warning.min.js] will have an [X] button added that the user can closure
            similar to the standard Framework `app.showErrorAlert('Test')`.
            - Markdown docs should be created for this though. Include links from `usingWebComponentsPolyfill()`
            - Reason is now [polyfill.js] works instead of [safari-nomodule.min.js] and not only Safari has the
                issue but Legacy Edge. The [X] button will allow a user to cancel if [old-browser-warning.min.js] is
                still being used by an app.
            - [old-browser-warning.min.js] will be kept as commented out in the templates with comments that
                the polyfill works for older browsers.
        - Include features of `js/plugins/navLinks.js` in the Web Component routers?
            - For example:
                <url-hash-router nav-selector="nav a" nav-active-class="active">
                if using [nav-selector] then [nav-active-class] would use "active" as the default
            - If using this then the custom JS on the Web Component Template will not be needed:
                https://www.dataformsjs.com/en/getting-started
            - Also related - does it make sense to combine `js/plugins/navList.js` with `navLinks.js`
                For example if the elements on the selector are not an <a> then run querySelector on
                each element in the selector to find the <a>
            - Since it's a breaking change it's ok to remove [navList.js] if the code can be combined.
        - Possible update found during testing:
            Update `app.loadJsControl()` to be safe to call multiple times.
            Currently it adds duplicate `app.activeJsControls` but it's doesn't break anything. 
        - Breaking change on [js/plugins/filter.js] to consider keeping but add another option,
            for example a new attribute that allows the new behavior.
            At line #144 this:
                filterError('Column filter requires a table to be correctly defined');
            Was replaced with some comments and `return settings;`
            Do more testing to make sure this change makes sense.
        - On the templates (and probably all examples) add the HTML [crossorigin] attribute
            so good errors can show in `window.onerror` from DataFormsJS. Need to test and confirm.
            https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script

**) Playground Site
    - Need to add support for JSON file/resource type
    - Add liniting for React/JSX, Babel recently started doing this online in the REPL:
        https://babeljs.io/repl
    - Currently JS is linted using jshint on the Playground, to lint JSX babel standalone will
        likely be used with a custom Code Mirror Plugin
    - When adding update the JS page code to load jshint and a linter for JSX only if the
        user is actually going to create a site. It can be downloaded in the background
        while the site is being created.

**) Combine Main Server and AI/ML Server into one.
    - Servers:
        https://www.dataformsjs.com/
        https://ai-ml.dataformsjs.com/
    - This site doesn't get enough traffic to need separate servers
    - Planned to use nginx for PHP, Node/GraphQL, Python/Flask on the same server
    - Related setup docs for current setup:
        https://github.com/dataformsjs/website/blob/master/docs/Main%20Site%20Server%20Setup.txt
        https://github.com/dataformsjs/website/blob/master/docs/Python%20Webserver%20Setup%20for%20AI_ML%20Functions.txt
    - This will likely be documented in a new markdown doc
    - Possibly include the playground server:
        https://playground.dataformsjs.com/
    - Playground code would likely be moved to the main website repository from:
        https://github.com/dataformsjs/playground
    - To handle that the [index.php] would check host 'playground.dataformsjs.com'
        or a new Request Header 'X-Playground' to determine which file to include [app.php]
        or migrated [playground.php]
    - A main issue to handle is how to setup HTTPS with https://letsencrypt.org/
        when the host is already being used by another static IP.
        More time to research and test this is needed.
    - Use HTTP/2 instead of http/1.1
        This can be done if migrating servers to nginx instead of Apache

*) New plugin or features to handle content preloading
    - For example routes could have a [data-preload] attribute and then a new plugin would
        download all content when the first page is opened. Other options for preloading
        could be added as well if they make sense.
    - This can could be developed and tested on the main site.
    - Ideally all related code would go in a new plugin and not the main [DataFormsJS.js] file
    - Also related on the main site some content is only downloaded and displayed when the user
      clicks an example. This is not SEO friendly and can cause a dealy for users with slow mobile
      devices. Ideally [role="tab"] would be used with content preloading
        https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/Tab_Role
    - Code for the home page is here:
        https://github.com/dataformsjs/website/blob/master/public/js/page-home-page.js
        - See code related to `code.setAttribute('data-template-url', page);`

*) Markdown Docs to Create
    - Build Processs
    - How Unit Testing Works
        See additional notes in this doc related to Unit Testing
    - Both of the above topics are covered briefly in:
        https://github.com/dataformsjs/dataformsjs/blob/master/docs/jsx-loader.md

*) Demos
    - React examples of the following:
        - https://www.dataformsjs.com/examples/entry-form-demo-hbs.htm
        - https://www.dataformsjs.com/examples/binary-classification-vue.htm#/en/
        - One option is to use https://react-hook-form.com/
        - A new <EntryForm> and related components might be created in the future as well (not yet decided on though)
    - One Page Site Demos are functional but very ugly:
        [examples/one-page-site-hbs.htm]
        [examples/one-page-and-spa-hbs.htm]
        - These should be updated with some basic info such as how they work and made to look nice
        - [one-page-and-spa-hbs.htm] was started based on the [template-files-hbs.htm] page
            so some content on the SPA pages is not needed

*) Version for deno of [dataformsjs/server/app.js]
    Allow server to start with either deno or node

*) Possibly link to Unit Tests from the footer on the main site
    - Current URL (hidden - not linked from anywhere):
        https://www.dataformsjs.com/unit-testing/
    - Possible new URL:
        https://www.dataformsjs.com/en/unit-tests
    - The current URL would then redirect
    - New page would need to look nice and provide a brief overview
    - Currently many Vue unit tests fail if using IE so this might have to be fixed first
        (either that or simply add notes to the page regarding IE and Vue)

*) Template Files
    - File [dataformsjs\examples\_template.htm] should be separated for different options and include a hello world or display of JSON data:
        _template_{hbs, vue, react}.htm

*) Additional Unit Testing for Vue
    - Currently Vue has to skip many tests due to how Virtual DOM works differently than templating
    - Possibly a new page, not yet decided on, low priority as everything works and it passes many tests
    - Currently many tests fail in IE with the Vue, however all demos work correctly

*) The Hacker News API Demo (link below) will likely be combined into a larger Public API's Demo
    - https://www.dataformsjs.com/examples/hacker-news-react.htm
    - Other API's to start:
        https://api.github.com/emojis
    - Once completed the page can be added to the examples section on the main site

*) jsxLoader.js
    - More unit testing (every line of code needs to be verified), unit tests run from:
        http://127.0.0.1:5000/unit-testing-react
        http://127.0.0.1:5000/unit-testing-preact
    - It's possible that every line it tested but it's not yet known for sure
    - Possible new functions to support JavaScript version by year for new Sytax, example:
        jsxLoader.requireES2018 = function() {
            this.evalCode = '"use strict"; const { id, ...other } = { id:123, test:456 };';
        };
        For example if the app uses spread sytax and calls `jsxLoader.requireES2018()` then
        browsers that don't support it (UC Browser, Edge) would use Babel. Currently this
        feature requires the developer of the app to to update `evalCode`.
        This issue is documented in the main JSX doc:
            https://github.com/dataformsjs/dataformsjs/blob/master/docs/jsx-loader.md
    - Development Tips for working with the Parser:
        - Make sure to set the following on the calling page:
            jsxLoader.logCompileTime = true;
            jsxLoader.logCompileDetails = true;
        - Once possible location of error has been found add code similar to the below item,
            search for 'debug here' in DevTools and then add a breakpoint:
                if (state.value === " render") {
                    console.log('debug here');
                    console.log(node);
                    console.log(tokens);
                }
    - This demo does not fully work so it's in code but not linked from the main site.
      Seems like it may be an issue due to Rax and not the jsxLoader. See comments in the HTML file.
        http://127.0.0.1:8080/countries-no-spa-rax.htm


*) Web Components Updates
    - These are wish list items that may never be developed. The reason is that as
        features are added the Web Components go from simple HTML elements to more of a full
        featured Framework. After development and real-world usage it seems to make sense
        to keep advanced features in the framework while keeping Web Components small and
        simple to use. If too many features are added the size of the Web Components can
        increase a lot and grouping related features (security, shared state, etc) makes
        more sense for a Framework or React code.
    - <json-data>
        - Add support on <is-loading> for new [template-selector] attribute
            It would work similar to the <data-List> control to render the model with JavaScript template literal string:
                const tmpl = new Function('data', 'render', 'with(data){return render`' + template.innerHTML + '`}');
            If using this [data-bind] would likely not need to be called.
        - Add support for custom Request Headers.
        - For how the standard Framework handles this see code related to [app.settings.requestHeaders].
        - React <JsonData> uses props
        - The Web Components version will likely use global variables to be defined from JS:
            <script>
                window.requestHeaders = {}
                window.requestHeadersByHostName = {}
            And then the Framework [app.getRequestHeaders] and related code can be used as a starting point
    - Create an [I18N] API for Web Components and initially use with:
        http://127.0.0.1:8080/places-demo-web
        - API is not yet started on so it has be decided first
        - Possibly several development versions will be created and tested
            with the best one selected
        - <i18n-service> outside of the hash router or <i18n-service url-params> under the hash router.
            How to do something like this with <data-table>?
                <a href="#/{{../i18n_Locale}}/regions/{{iso}}">
            Possibly:
                col-link-template="#/:window.i18n_Locale/regions/:iso"
            Another option if using <i18n-service> outside of the hash router could be to define
            [i18n-key="value"] attributes on elements that <i18n-service> would update.
            The <i18n-service> then might have to use JS code such as the following to handle updates
                document.querySelector('url-hash-router').addEventListener('contentLoaded')
                await componentsAreDefined(document)]
            Likely try several versions to see what makes the most sense
    - Create Search Screen for the following page:
        - http://127.0.0.1:8080/places-demo-web
        - This requires creating a new web component (either generic or part of the app)
        - See standard framework demos with Handlebars, Vue, and React:
            http://127.0.0.1:8080/places-demo-hbs#/en/
            http://127.0.0.1:8080/places-demo-graphql#/en/
            http://127.0.0.1:8080/places-demo-vue#/en/
            http://127.0.0.1:8080/places-demo-react#/en/

*) Many Docs need to be created along with API page(s)
    - API needs a quick search/filter feature to look up any attribute/class/function/etc
        and find where it is defined and how to use it.
    - UI/UX still needs to be decided on for API docs
    - Or Docs can simply be added to GitHub as Markdown Docs

*) Create Server-side Starter Sites in all widely used Languages and Frameworks
    - Include ability for content to be defined server-side and saved to a SQLite Db

*) Docs and demos to Create
    - Cleanup [DataFormsJS\examples\handlebars-helpers.htm] and add to to the main
        examples page. Also create a similar [vue-directives.htm] file.
        - For cleanup likely add a new plugin [refreshOnTimer] to refresh the page
          on a defined interval from the HTML controller.
        - Need to demonstrate all Handlebars Helpers such as {{#ifJS}}
    - Framework Event Order (note - Vue varies slightly)
        ====================================================
        Page Event Order when a URL Changes:
        ------
        plugins.onRouteUnload()
        controller.onRouteUnload(model as this)
        plugins.onRouteLoad(next)
        controller.onRouteLoad(model as this)
        ... Then code below:
        --------------------------------------------------
        Event Order for when app.updateView() is called.
        This can happen multiple times per URL/Hash Change:
        ------
        controller.onBeforeRender(model as this)
        plugins.onBeforeRender()
        -- HTML Template Rendered --
        -- HTML Controls Rendered --   Elements with [data-template-id] or [data-template-url]
        -- JS Controled Loaded -- Custom JS Controls defined by [js/controls]
        plugins.onRendered()
        controller.onRendered(model as this)
        app.onUpdateViewComplete()  # Global event - typically for Unit Testing only
        ====================================================
    - Getting Started Page
        - See comments in: [Website\public\js\page-getting-started.js] under [viewTemplate.onclick]
            Templates should possibly be rendered from PHP server-side. FastSitePHP has
            and I18N API that is similar to DataFormsJS so it would be easy to convert.
        - Likely add a regions page that is downloaded from CDN, this would also need to handle
            translations so server-side code would help here
    - If using Vue then document and show examples of which controller functions are called
        by which Vue events - search [DataForms.js] for "new Vue".
        - Example [Controlller.onRouteLoad] is called by [Vue.mounted]
    - Vue - [app.activeVueModel] can be used but not on the first [onRendered], apps should use [this]
    - How to use custom events for <url-hash-router> and <json-data>
      See comments in JS code at bottom of:
        DataFormsJS\examples\places-demo-web.htm
    - How to use Authorization and various options, see example in [DataFormsJS\examples\entry-form-demo-hbs.htm]
    - Document with an example of why most event listener functions should be defined
      in separate named functions outside of [addEventListener]. For example if
      an anonymous function is added and the plugin is called multiple times on
      the same element then multiple functions would be called. Example [clickToHighlight]
      uses [toggleHighlight()], if not used and [app.plugins.clickToHighlight.onRendered()]
      were called several times then it performs the same action several times.
    - How to use [app.loadScript()], example:
            var url = 'https://cdn.jsdelivr.net/npm/chart.js@2.9.2/dist/Chart.min.js';
            app.loadScript(window.Chart, url, callback);
        or:
            app.loadScript(window.Chart, url).then(function() {
                // Code for Chart
            });
        To load script 1st Parameter needs to be [false] or [undefined]:
            (window.Promise && window.fetch ? true : false)
            window.fetch
    - How [app.lazyLoad], [data-lazy-load] and [app.loadScripts] works, for starting point
      see comments in:
        DataFormsJS\examples\places-demo-hbs.htm
    - How to setup a local development - create the following folders, download needed files to them,
      then comment out CDN links and uncomment the vendor links.
        DataFormsJS\vendor
        DataFormsJS\test\vendor\qunit
    - Examples in the [js/templates/*] such as [page-object.js] will likely be moved to documentation
        pages and the template files more minimal with only [console.log()] on the events.
        In the future there should be unit tests for the [js/templates/*] files.
    - Custom Controls, for example usage see [DataFormsJS\examples\js-control-demos-hbs.htm]
        That file can be a starting point to see code for how to build custom controls.
        In the future there should also be one or more [DataFormsJS\js\templates\*.js] files
        for custom controls.
    - Need demos for Handlebar Helpers, Vue Directives and React Format class
    - All Parameters for I18N Files and Classes, example for React:
        const defaultLocale = 'en';
        const supportedLocales = ['en', 'ja'];
        const fileName = 'countries';
        const fileDir = 'http://localhost:3000/i18n';
        const i18n = new I18n(defaultLocale, supportedLocales, fileName, fileDir);
    - Build process for JS on the main site:
        npm install uglify-js -g
        uglifyjs page-home-page.js -o page-home-page{YYYYMMDD}.min.js -c -m
        uglifyjs page-home-page.js -o page-home-page.20200205.min.js -c -m
        uglifyjs prism.modified.js -o prism.modified.min.js -c -m
    - Document different build options that can be used
        Uglify-js https://www.npmjs.com/package/uglify-js
        Google Closure Compiler https://developers.google.com/closure/compiler/
        Estimated Gzip size  https://github.com/sindresorhus/gzip-size-cli
        --
        Example using Windows [*.bat] files:
        Note - paths are currently invalid
        ----
        ECHO Building File [DataFormsJS.min.js] with Uglifyjs
        uglifyjs ^
                .\..\src\DataFormsJS.js ^
                .\..\src\pages\jsonData.js ^
                .\..\src\plugins\filter.js ^
                .\..\src\plugins\sort.js ^
                -o .\..\dist\DataFormsJS.min.js -c -m
        ---
        REN This script assumes Java is installed and [compiler.jar] is copied to this folder
        ECHO Building File [DataFormsJS.min.js] with Google Closure
        java -jar compiler.jar ^
            --compilation_level SIMPLE_OPTIMIZATIONS ^
            --js_output_file=DataFormsJS.min.js ^
            --js DataFormsJS.js ^
            --js jsonData.js ^
            --js handlebars-helpers.js ^
            --js filter.js
        --
        Using a windows [*.cmd] file to run the [*.bat] file and set a file date:
        --
        REM This File can be double-clicked on from Windows Explorer
        REM If building multiple builds in the same day add letter to the end, example YYYYMMDD{a-z}
        ECHO OFF
        ECHO *******************************************************
        REM CALL Build.bat
        CALL Build.bat
        REM REN DataFormsJS.min.js DataFormsJS.min.%date:~-4,4%%date:~-7,2%%date:~-10,2%.js
        REN DataFormsJS.min.js DataFormsJS.min.%date:~-4,4%%date:~-7,2%%date:~-10,2%.js
        PAUSE
        --
    - How to delay a loading screen for a specific time through CSS, see example in:
        Website\public\html\getting-started\getting-started.css
    - MNIST Keras/TensorFlow demo with JS Plugin to allow user to draw number
    - How to replicate embedded page links using hash URL:
        Normally <a href="#target"> would work to link to:
            <div id="target">
        However because SPA hash routing is used App would redict to another page
        Example work-around:
            <a href="javascript:document.getElementById('target').scrollIntoView();window.scrollTo(0, window.pageYOffset-100);">
        In the future this could be make into a generic plugin. The [window.scrollTo()] is used above to handle
        a fixed header in a specific app.
    - Show difference between jQuery, Object.assign() and app.deepClone() in a doc
        jQuery adds to an array rather than replace it
			var data = { a:[ {o1:1}, {o2:2}, {o3:3}, {o4:4} ] }
			$.extend(true, data, { a:[ {o1:'a'}, {o2:'b'}, {o3:'c'} ] })
		Then:
			data = { a:[ {o1:'a'}, {o2:'b'}, {o3:'c'}, {o4:4}  ] }
			- Issue with jQuery Deep Clone [o4] is still kept which results in
              in unexpected results for the Json Data Services (page.jsonData, <JsonData>, etc)
		Compare with:
			Object.assign(true, data, { a:[ {o1:'a'}, {o2:'b'}, {o3:'c'} ] })
			app.deepClone(data, { a:[ {o1:'a'}, {o2:'b'}, {o3:'c'} ] })
		Show this as a more practical example (real records in an array)

		# Object.assign() works but will set a ref to original nested array
        var data = { a:[1,2,3] }
        var data2 = Object.assign({}, data)
			# compare with: [var data2 = app.deepClone({}, data)]
        data2.a === data.a
        data.a.push(4)
        data2.a.indexOf(4)

*) Home Page - Fix Main Computer Animation for IE 11 and Edge?
    - Currently the animation only partially shows on IE and Edge.
        IE and Edge support CSS animations with SVG elements well but it appears
        that using JS events on certain types of SVG elements does not work.
        A possible fix would be to check user agent and if IE or Edge then
        use window.setTimeout() instead of transitionend - Might not be worth
        it though because of low number of developers who use IE.
            domEl.addEventListener('transitionend', transitionEnd);

*) [Website\public\sitemap.xml]
    In the future this file will be generated as more languages are added.
    - Rather than including all examples one language for each demo is selected (a mix of Handlebars, Vue, React, Web Components)
      and some examples are excluded such as the log demo and entry form demo since they only include random data and no info.
    - For each demo the selected version should be also be used for canonical links, example:
        <link rel="canonical" href="https://www.dataformsjs.com/examples/places-demo-hbs.htm">
    - For new demos that will be excluded from the sitemap they should still have a canonical link added

*) Playground Page
    - Optimization - stop/start the timers based on if the tab is active or not?
        https://webkit.org/blog/8970/how-web-content-can-affect-power-usage/
        https://developer.mozilla.org/en-US/docs/Web/API/Page_Visibility_API
    - Add CodeMirror support for GraphQL
        At the time of writing GraphQL is not a built-in mode for CodeMirror:
            https://codemirror.net/mode/index.html
        Instead Facebook uses their own custom mode and it requires a custom build process and not CDN, see:
            https://github.com/graphql/graphiql/tree/master/packages/codemirror-graphql

*) DataFormsJS\js\React\jsPlugins.js
    How to handle [Plugin.onRouteUnload()]? Not yet needed with common framework plugins but needed
    for future plugins that use [window.setInterval] or [window.setTimeout]

*) DataFormsJS\js\Plugins\highlighter.js
    - Allow users to define text results such as "{count} Records matched [{value}]"
    - Need ability to handle multiple languages

*) dataformsjs\js\plugins\codemirror.js
    - Create a demo page (both Vue and Handlebars)
    - This would likely include a web service that returns different example code in multiple languages from the server
    - Possibly add an options to save changes automatically from the textarea. Example:
        app.plugins.codemirror.saveEditsAutomatically = true;
    - The option could be setup to be `true` by default. That would change the behavior of the plugin,
        however in general this plugin would likely be used as a template plugin anyways.

*) todomvc Example
    - Possibly publish it as a seperate Repository with notes on how to copy?
    - Or keep core files with notes on how to install?
    - Future - run unit tests against it:
        https://github.com/tastejs/todomvc/tree/master/tests

*) Add unit tests for momentjs with handlebars - or add to a seperate page?
    - Originally it was included but has been removed from the initial release:
            <div id="moment-01">{{moment (now) "YYYY.MM.DD"}}</div>
            <div id="moment-02">{{moment dateTime "YYYY.MM.DD, h:mm:ss A"}}</div>
            { id: "moment-01", value: (new Date()).getFullYear(), type: "contains" },
            { id: "moment-02", value: "2015.01.31, 1:23:45 PM" },

*) Chosen Plugin, need examples or docs showing how callbacks from [app.events.on] are used

*) Log Demo [log-table-hbs.htm], [log-table-vue.htm], etc
    - move <h1>, and <nav> outside of the render section so that they do not flash
        when cleared from each screen. Would need to make sure the [clear filter]
        button doesn't get set multiple times.
        Also possibly do this for the <input filter> control.

*) GraphQL
    - Add GraphQL support on [pages/entryForm.js]
    - Add support for other GraphQL types such as Float.
        Currently only Strings and Ints are supported, see:
        https://graphql.org/graphql-js/basic-types/
        - Related Code:
            app.buildGraphQLVariables()
    - Can the file [app\app.js] be easily updated to avoid using "SELECT *"
        on SQL queries and get only the requested fields. Only do this if it
        doesn't take too much code because the file is meant to be a simple
        and readable demo. See the following link:
        https://www.prisma.io/blog/graphql-server-basics-demystifying-the-info-argument-in-graphql-resolvers-6f26249f613a
    - Add GET support for GraphQL in:
        DataFormsJS\js\controls\json-data.js
      See how it can be done from:
        DataFormsJS\js\pages\jsonData.js
      When adding a demo page needs to be created to test

*) Create pluings and examples for popular JS libraries
    https://www.chartjs.org/
    http://ckeditor.com/
    https://www.tiny.cloud/
    https://codemirror.net/
    Many, many more

*) Demo Pages
    - Use a page to show summary data on charts, example
        Pie Chart with Population by Continent
    - Geonames Data Service that shows Country Names in User's local langauge

*) Possible Updates for Vue
    SPA is currently required for Vue
    Example Non-SPA demo [DataFormsJS\examples\countries-no-spa-hbs.htm]
    currently cannot be converted to Vue

*) Create Unit Tests for the following functions:
    Controller.onRouteUnload

*) Improve Unit tests for IE 11
    - Typically they work about 50% of the time, however several routes have an
      issue related to calls for [tester.pageTester2]
    - It appears that [app.onUpdateViewComplete] is being called twice the first time
      that it should be called. The reason for this is not yet known.
    - It's not yet determine if this is a bug or related to IE behavior. Regardless
      DataFormsJS has been used extensively with IE Users for many years before it was
      released so it's known to work well with IE.
    - To test the issue find and update the following code in [dataformsjs\test\js\unit-testing-core.js]:
                // After checking the 'Page is Loading' message define a new
                // [onUpdateViewComplete] function to check the final response.
                app.onUpdateViewComplete = function () {
                    // Now check the 2nd state (usually after a web service response)
                    assert.equal(window.location.hash, hash, 'Hash Check - ' + hash);
                    if (expectHtml2 !== null) {
                        //// **** This block is the section to add for manual testing.
                        if (hash === '#/page-json-data-load-only-once' || hash === '#/page-reload-json-data' || hash === '#/missing-page-json-data') {
                            var html = document.getElementById('view').textContent.trim();
                            if (html !== expectHtml2) {
                                console.log(hash);
                                console.log(expectHtml2);
                                console.log(html);
                            }
                        }
                        tester.checkElement('view', expectHtml2, assert);
                    }

*) Additional Unit Testing for the following functions, props, etc:
    data-engine:
        Validate error message in [app.setup()] at [(viewEngine === ViewEngines.Unknown)]
        This will be similar to the unit test for "template-invalid-path"
    app.deepClone() - Test with getter/setter props
    app.loadScript()
    [app.lazyLoad] and all related features including [app.loadScripts]
        See additional comments in next item below
    app.loadJsControl(), examples
        - verify [app.activeJsControls[n].data] objects
        - manually call and recall [app.loadJsControl()]
    app.unloadAllJsControls()
        - manually test before a route is unloaded or when page is called with updateView
    [data-default-route] used to specify default route from script element (used on the main web site)
    app.locals
    controller.settings
        - using Arrays, Objects, etc
    Event Order for manual calls to [refreshHtmlControl()] and [refreshAllHtmlControls()]
        and how they call [refreshPlugins()] and [loadAllJsControls()].
        This can probably be checked in test "Route Change and Event Order"
        - Parmas should be tested for these functions as well
    addPlugin(name, function)
        Currently only [addPlugin(name, object)] is validated
    addPage() and addController()
        When creating Unit Tests for Vue these two functions should exclude the function [onBeforeRender]
        from validation in case a controller only defines that function. When using Vue [onBeforeRender()]
        is not called - low priority updated needed in [DataForms.js] for this
    app.setttings.getRequestHeaders
        - Example:
            app.settings.requestHeaders = { "X-Test-Header": "Test123", "X-Test2": "ABC" };
            app.settings.requestHeadersByHostName = { localhost: { "X-Test-Header": "123456789" }};
            app.getRequestHeaders("http://localhost/test");
            app.getRequestHeaders("https://www.example.com/");
    Test paramaters for all [apply(app.activeModel, app.activeParameters)] code
    app.handleGlobalErrors()
    <templates> = [display:none] for IE but not other browsers
    plugin.onRouteLoad
    Create a seperate page for testing features if no controllers are included on a page
        verify that plungins run, etc
    data-set-text-content
    app.getTemplateType()
        Error under [(script.tagName !== 'TEMPLATE' && script.tagName !== 'SCRIPT')] is not tested
    CSS Error Styles that were added after Unit Tests were initially created:
        '.dataformsjs-error,.dataformsjs-fatal-error{',
            'white-space:pre;',
            'text-align:left;',


*) Update for previous Unit Tests that changed when [app.lazyLoad] as added.
    - Before [app.lazyLoad] the pages had to be defined when controllers were added
      so this code was included under [DataFormsJS.js -> addController()]
        if (controller.pageType !== null && controller.pageType !== undefined) {
            ...
            validateObjectExists(this.pages[controller.pageType], 'app.pages.' + controller.pageType, funcName);
            validateTypeOf(this.pages[controller.pageType].model, 'object', 'app.pages.' + controller.pageType + '.model', funcName);
    - And the following were tested in [unit-testing.js]:
            try {
                expectedMessage = "[app.pages.MissingPage] must first be defined before the function app.addController(path=Test) is called";
                app.addController({ path: "Test", pageType: "MissingPage" });
                assert.ok(false, "Test should have failed");
            } catch (e) {
                assert.ok(e instanceof TypeError, "Execption should be a TypeError");
                assert.equal(e.message, expectedMessage, expectedMessage);
            }

            try {
                //First add an invalid page manually without using app.addPage()
                //This error would happen if the developer overwrites a page object
                //as a invalid type or if they manually add an invalid page.
                app.pages.InvalidPage = { model: function () { return ""; } };
                tester.pagesCount++;

                //Run the test
                expectedMessage = "[app.pages.InvalidPage.model] was not defined as a object when the function app.addController(path=Test) was called";
                app.addController({ path: "Test", pageType: "InvalidPage" });
                assert.ok(false, "Test should have failed");
            } catch (e) {
                assert.ok(e instanceof TypeError, "Execption should be a TypeError");
                assert.equal(e.message, expectedMessage, expectedMessage);
            }
    - That validation is now handled in [function setControllerFromPage(controller)] with the following code
			if (app.pages[controller.pageType] === undefined) {
				error = 'The page [' + controller.pageType + '] has not been loaded for Controller[path=' + controller.path + '].';
			} else if (typeof app.pages[controller.pageType].model !== 'object') {
				error = 'Error - The [model] property for page object [' + controller.pageType + '] must be a valid JavaScript Object.';
			}
    - The new validaiton needs to be tested and will have to use hash routing to check the view after hash change for the errors

*) DataFormsJS Object
    *) app.addPage("name", callback)
        if function is passed then it will create page as
            { model:{}, onRendered:callback }
        similar to how [app.addPlugin()] works with a callback function
    *) More HTML defaults for things such as [app.settings.defaultRoute]?
        document.documentElement.getAttribute('data-show-errors')
    *) app.routeMatches() should not match "/" to [data-route="/:count"]
    *) Need a redirect function, currently using this in one of the demos:
        app.addController({ path:"/", onBeforeRender:function() {
            window.location.hash = "#/20";
        }});
        * Something will need to be fixed now since ":lang" will be used
        on the main site
    *) Add [app.settings.fetchOptionsByHostName] which will be similar
        to [requestHeadersByHostName] and add a related [getFetchOptons()]
        function that will be similar to [getRequestHeaders()].

*) Page [entryForm]
    *) Add support for radio input controls
    *) Add support for additional [data-type] values
    *) Keep [Save] button disabled if there are no changes
        Try adding this first as a seperate plugin
    *) <input type="file"> likely to be handled with various plugin options and example server code
        see the image classification demo for now
    *) Add validation options to highlight invalid controls
    *) Possibly here or in [plugins/listEditor.js] add a [saveFormat] option with values such as
        "all-records" or "changes-only". Variaous Server Side code examples need to go with it

*) Control [json-data]
    *) Nested templates are currently not supported, does it make sense to support?
        See example in [examples\places-demo-hbs.htm]

*) Plugin [clickUrlAction]
    *) Add options for showing loading or indicator, etc or a or callback for user to handle
    *) If a new page is loaded before this service downloads then don't write back to active model
        To start a simple currentUrl <> previousUrl can be used
    *) Action "refresh-html-controls" should also support an optional [data-controls-selector]

*) Control [data-table.js]
    Add support for [col-link-template] and [col-link-fields] just like is used in the Web Components.
    This may remove the need for a custom plugin used in [examples\places-demo-js.htm], however
    the root [i18n_Locale] variable will have to be figured out how to add it.

*) Extension validation
    *) Many more validations needed including all HTML standard attributes such as <input pattern>

*) Improvements for [app.showErrorAlert()] to show all errors as a list?
    For example keep adding errors to a <ul> control and allow user to clear them.

*) Unit Test all Possible Errors
    For example a specific plugin that throws an exception from [onRendered()]

*) New Unit Test Page to Test Controls, Plugins, etc when not using Single-Page-App (Controllers)

*) Support Built-In Timers for both Controller and Controls?
    data-refresh-time-interval="1000"
    Currently [refreshTimeInterval] is avaialble on the [json-data] Control
*) Handlebars Helpers
    - Make sure all helpers are tested - examples of needed [nlbr, yesNo, yesNoNull]
    - More testing of different languages, etc
    - Test all options for ifCond
    - 'join' function to work on array properties
